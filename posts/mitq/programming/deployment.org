---
title: Rail+NGinx+PostgreSQL+Redis setup
tags: DevOps, deployment, linux-setup
date: 2018-03-24
description: DESCRIPTION
comments: true
toc: true
---

* TODO
** Backup Letsencrypt folder
** backup config files move to shared folder
* server fingerprint changes
#+BEGIN_SRC bash
  > ssh-keygen -f "/home/arthur/.ssh/known_hosts" -R <ip_address>
  > ssh-keygen -f "/home/arthur/.ssh/known_hosts" -R <domain_name>
#+END_SRC
* create user
#+BEGIN_SRC bash
  > adduser deployer
  > sudo usermod -aG sudo deployer
  > mkdir /home/deployer/.ssh
  > cp .ssh/authorized_keys /home/deployer/.ssh/
  > sudo chown -R deployer:deployer /home/deployer/.ssh/

  # edit /etc/ssh/sshd_config
  ...
  PasswordAuthentication no
  ...
  # allow from some hosts
  # Settings that override the global settings for matching IP addresses only
  Match address 192.0.2.0/24
    PasswordAuthentication yes
  > service ssh reload

  # on remote server check permission and set to if needed
  # chmod 700 .ssh
  # chmod 600 .ssh/authorized_keys
#+END_SRC
* Nginx
#+BEGIN_SRC bash
  https://websiteforstudents.com/install-nginx-latest-version-ubuntu-16-10-17-04/
  # For the stable version, change mainline to stable.
  > sudo sh -c 'echo "deb http://nginx.org/packages/mainline/ubuntu/ `lsb_release -cs` nginx" >> /etc/apt/sources.list.d/nginx.list'
  > sudo sh -c 'echo "deb-src http://nginx.org/packages/mainline/ubuntu/ `lsb_release -cs` nginx" >> /etc/apt/sources.list.d/nginx.list'
  > wget -q http://nginx.org/keys/nginx_signing.key -O - | sudo apt-key add -
  > sudo apt -y update
  > apt-cache policy nginx
  > sudo apt install -y nginx
  > nginx -v
  > sudo systemctl enable nginx
  > sudo service nginx start
  > systemctl status nginx
#+END_SRC
* set domain or subdomain
#+BEGIN_SRC bash
 # add A-record to dns server
 > sudo vi  /etc/hosts
 127.0.1.1 test.<domain_name> test
 127.0.0.1 localhost
#+END_SRC
* Let's Encrypt
#+BEGIN_SRC bash
 it is easy to get certificate before you have the advacned nginx config for
 your site
> sudo add-apt-repository ppa:certbot/certbot
> sudo apt update -y
> sudo apt install -y python-certbot-nginx
> sudo systemctl reload nginx
> sudo nginx -t # verify the syntax of configurations
> sudo certbot certonly --dry-run --nginx -d <domain_name> -d www.<domain_name>

# TODO: backup /etc/letsencrypt fodler
# configuration directory at /etc/letsencrypt. You should make a
# secure backup of this folder now. This configuration directory will
# also contain certificates and private keys obtained by Certbot so
# making regular backups of this folder is ideal.

# at first comment ssl parts from nginx config for the site we want to get  certificate
# TODO: generate pre-certifiacation config for site
# enter email address, c - is canceling all process.
> sudo certbot --nginx -d taxicenter.am -d www.taxicenter.am

> sudo certbot renew --dry-run
#+END_SRC
* Installing Ruby, Nodejs more packages  [[https://gorails.com/setup/ubuntu/16.04][Go rails instruction]]
#+BEGIN_SRC bash
> curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
> curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
> echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
> sudo apt-get -y update
> sudo apt-get -y  install git-core curl zlib1g-dev build-essential libssl-dev
> sudo apt -y install  libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev
> sudo apt -y install  libcurl4-openssl-dev python-software-properties libffi-dev nodejs yarn
#+END_SRC

** Installing rbenv
#+BEGIN_SRC bash
   > cd
   > git clone https://github.com/rbenv/rbenv.git ~/.rbenv
   > echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
   > echo 'eval "$(rbenv init -)"' >> ~/.bashrc
   > exec $SHELL

   > git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
   > echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc
   > exec $SHELL

   > rbenv install 2.5.0
   > rbenv global 2.5.0
   > ruby -v

   > echo "gem: --no-document" > ~/.gemrc
   > gem install bundler
   > rbenv rehash
   > gem list rails
   > gem env home

   Commands
   > rbenv install -l # list of versions that you can choose to install.
   > rbenv versions # Lists all Ruby versions known to rbenv
   > rbenv version # Displays the currently active Ruby version
#+END_SRC

* PostgreSQL
#+BEGIN_SRC bash
  > sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'
  > wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | sudo apt-key add -
  > sudo apt update -y
  > sudo apt -y install postgresql postgresql-contrib libpq-dev
  # add user auth
  > sudo vi /etc/postgresql/10//main/pg_hba.conf
    local   iot iothub_production peer
  > sudo systemctl status  postgresql
  > sudo systemctl enable  postgresql
  > sudo systemctl restart postgresql
#+END_SRC
** create db user, set postgres password
#+BEGIN_SRC bash
  > sudo su postgres
  > psql
  # \password -- set password for psotgres
  Welcome*99
  > create user iot with password 'yourpass' createdb;
  # \du -- list users
#+END_SRC
** postgresql hacks
#+BEGIN_SRC bash
   > SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity
     WHERE pg_stat_activity.datname = 'iothub_production;
#+END_SRC
* Mina
** install mina gem
#+BEGIN_SRC bash
   > gem instal mina
#+END_SRC
** some commands with no password
#+BEGIN_SRC bash
   sudo visudo
   ՈՒշադրություն, գրել վերջում
   # IMPORTANT!!!  add at the end
   deployer ALL=(ALL) NOPASSWD: /bin/ln
   deployer ALL=(ALL) NOPASSWD: /bin/chmod
   deployer ALL=(ALL) NOPASSWD: /bin/cp
   https://github.com/mina-deploy/mina/issues/234#issuecomment-57242061

> sudo service ssh reload
> mina test setup
# at frist time uncomment schema_load, then comment
> mina test deploy
#+END_SRC
* Backup gem
#+BEGIN_SRC bash
  > gem install backup -v5.0.0.beta.2
#+END_SRC
