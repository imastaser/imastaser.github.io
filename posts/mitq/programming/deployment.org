---
title: Rail+NGinx+PostgreSQL+Redis setup
tags: DevOps, deployment, linux-setup
date: 2018-03-24
description: DESCRIPTION
comments: true
toc: true
---

* TODO
- Backup Letsencrypt folder
- backup config files move to shared folder
* create ssh key for remote server
#+BEGIN_SRC bash
 ssh-keygen -t rsa
 cat ~/.ssh/<ssh_file_name>.pub
 ssh user@<ip>
 # check for key in server
 cat ~/.ssh/authorized_keys
#+END_SRC

* server fingerprint changes
#+BEGIN_SRC bash
  ssh-keygen -f "/home/arthur/.ssh/known_hosts" -R <ip_address>
  ssh-keygen -f "/home/arthur/.ssh/known_hosts" -R <domain_name>
#+END_SRC
* create user
#+BEGIN_SRC bash
 adduser deployer
 sudo usermod -aG sudo deployer
 mkdir /home/deployer/.ssh
 cp .ssh/authorized_keys /home/deployer/.ssh/
 sudo chown -R deployer:deployer /home/deployer/.ssh/

 # edit file
 sudo vi /etc/ssh/sshd_config
 ...
 PasswordAuthentication no
 ...
 # allow from some hosts
 # Settings that override the global settings for matching IP addresses only
 Match address 192.0.2.0/24
   PasswordAuthentication yes
 service ssh reload

 # on remote server check permission and set to if needed
 # chmod 700 .ssh
 # chmod 600 .ssh/authorized_keys
 logout
 ssh deployer@<ip_adddress>
#+END_SRC
* Nginx
#+BEGIN_SRC bash
  # https://websiteforstudents.com/install-nginx-latest-version-ubuntu-16-10-17-04/
  # For the stable version, change mainline to stable.
  sudo sh -c 'echo "deb http://nginx.org/packages/mainline/ubuntu/ `lsb_release -cs` nginx" >> /etc/apt/sources.list.d/nginx.list'
  sudo sh -c 'echo "deb-src http://nginx.org/packages/mainline/ubuntu/ `lsb_release -cs` nginx" >> /etc/apt/sources.list.d/nginx.list'
  wget -q http://nginx.org/keys/nginx_signing.key -O - | sudo apt-key add -
  sudo apt -y update
  apt-cache policy nginx
  sudo apt install -y nginx
  nginx -v
  sudo systemctl enable nginx
  sudo service nginx start
  systemctl status nginx
#+END_SRC
* set domain or subdomain
#+BEGIN_SRC bash
 # add A-record to dns server
 sudo vi  /etc/hosts
 127.0.1.1 test.<domain_name> test
 127.0.0.1 localhost
#+END_SRC
* Let's Encrypt
#+BEGIN_SRC bash
 # it is easy to get certificate before you have the advacned nginx config for
 # your site
sudo add-apt-repository ppa:certbot/certbot
sudo apt update -y
sudo apt install -y python-certbot-nginx
sudo systemctl reload nginx
verify the syntax of configurations
sudo nginx -t
sudo certbot certonly --dry-run --nginx -d <domain_name> -d www.<domain_name>

# TODO: backup /etc/letsencrypt fodler
# configuration directory at /etc/letsencrypt. You should make a
# secure backup of this folder now. This configuration directory will
# also contain certificates and private keys obtained by Certbot so
# making regular backups of this folder is ideal.

# at first comment ssl parts from nginx config for the site we want to get  certificate
# TODO: generate pre-certifiacation config for site
# enter email address, c - is canceling all process.
sudo certbot --nginx -d <domain_name> -d www.<domain_name>

sudo certbot renew --dry-run
#+END_SRC
* Ruby, Nodejs, [[https://gorails.com/setup/ubuntu/16.04][Go rails instruction]]

 Nodejs
#+BEGIN_SRC bash
 curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
 sudo apt -y update
 sudo apt -y install git-core curl zlib1g-dev build-essential libssl-dev
 sudo apt -y install  libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev
 sudo apt -y install  libcurl4-openssl-dev libffi-dev nodejs
#+END_SRC

Yarn
#+BEGIN_SRC bash
 curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
 echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
 sudo apt-get update && sudo apt-get install yarn
#+END_SRC


rbenv
#+BEGIN_SRC bash
 cd
 git clone https://github.com/rbenv/rbenv.git ~/.rbenv
 echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
 echo 'eval "$(rbenv init -)"' >> ~/.bashrc
 exec $SHELL

 git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
 echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc
 exec $SHELL

 rbenv install 2.5.1
 rbenv global 2.5.1
 ruby -v

 echo "gem: --no-document" > ~/.gemrc
 gem install bundler
 rbenv rehash
 gem list rails
 gem env home

 # Commands
 rbenv install -l # list of versions that you can choose to install.
 rbenv versions # Lists all Ruby versions known to rbenv
 rbenv version # Displays the currently active Ruby version
#+END_SRC

* PostgreSQL
#+BEGIN_SRC bash
 sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'
 wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | sudo apt-key add -
 sudo apt update -y
 sudo apt -y install postgresql postgresql-contrib libpq-dev
 # add user auth
 sudo vi /etc/postgresql/10//main/pg_hba.conf
 local   <db_name> <user_role> md5
 sudo systemctl status  postgresql
 sudo systemctl enable  postgresql
 sudo systemctl restart postgresql
#+END_SRC

create db user, set postgres password
#+BEGIN_SRC bash
  sudo su postgres
  psql
  # set password for psotgres
  \password --
  # <your_password for super user>
  create user iot with password 'yourpass' createdb superuser;
  \du -- list users
  \q
  exit
#+END_SRC
** postgresql hacks
#+BEGIN_SRC bash
   > SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity
     WHERE pg_stat_activity.datname = 'iothub_production;
#+END_SRC
* Redis
#+BEGIN_SRC bash
---------Install build and test dependencies: ------
sudo apt -y update
sudo apt -y full-upgrade
# make test required tcl to run
sudo apt-get -y install build-essential tcl

---------Set up redis: -------
#Download latest copy via this link or with this
mkdir Downloads
cd Downloads
curl -O http://download.redis.io/redis-stable.tar.gz
tar xzvf redis-stable.tar.gz

cd redis-stable
make
sudo make install
make test

------ Configure redis: -------
#Create configuration directory:
sudo mkdir /etc/redis
# Move sample redis configuration file:
sudo cp ~/Downloads/redis-stable/redis.conf /etc/redis
sudo vi /etc/redis/redis.conf
#set dir for persistent data dump, for log
supervised systemd
dir /var/redis
logfile /var/redis/redis.log

------ Set up the systemd unit file:------
#create file
sudo vi /etc/systemd/system/redis.service

# add to file
[Unit]
Description=Redis In-Memory Data Store
After=network.target

[Service]
User=redis
Group=redis
ExecStart=/usr/local/bin/redis-server /etc/redis/redis.conf
ExecStop=/usr/local/bin/redis-cli shutdown
Restart=always

[Install]
WantedBy=multi-user.target

-----––––-----–– Set up redis user, groups and directories: –––
# if /etc/systemd/system/redis.service cahnged
sudo systemctl daemon-reload
# create redis user and group with same ID but no home directory:

sudo adduser --system --group --no-create-home redis
sudo mkdir /var/redis   # create directory
sudo chown redis:redis /var/redis   # make redis own /var/redis
sudo chmod 770 /var/redis   # adjust permission

sudo systemctl enable redis # Enable redis to start at boot:
sudo systemctl start redis

#other commands
systemctl status redis
sudo systemctl restart redis

------- Enable redis to start at boot:------
sudo systemctl enable redis

----------------- Test instance: ------------
redis-cli
ping
set test "It's working!"
get test
exit
sudo systemctl restart redis
--–– FIX Warnings ––-

--- WARNING overcommit_memory is set to 0
-- fix warning
sudo vi /etc/sysctl.conf
vm.overcommit_memory=1

# run on trminal as well
sudo sysctl vm.overcommit_memory=1

--- The TCP backlog setting of 511 cannot be enforced because
---- /proc/sys/net/core/somaxconn is set to the lower value of 128

sudo vi /etc/rc.local
sysctl -w net.core.somaxconn=65535

# run on trminal as well
sudo sysctl -w net.core.somaxconn=65535
#+END_SRC
* Mina
** install mina gem
#+BEGIN_SRC bash
   gem instal mina
#+END_SRC

* some commands with no password
#+BEGIN_SRC bash
 sudo vi /etc/sudoers
 # shift+G
 ՈՒշադրություն, գրել վերջում
 # IMPORTANT!!!  add at the end
 deployer ALL=(ALL) NOPASSWD: /bin/ln
 deployer ALL=(ALL) NOPASSWD: /bin/chmod
 deployer ALL=(ALL) NOPASSWD: /bin/cp

 # :wq!
 # https://github.com/mina-deploy/mina/issues/234#issuecomment-57242061
 sudo service ssh reload
#+END_SRC

** deploy with mina
#+BEGIN_SRC bash
> mina test setup
# at frist time uncomment schema_load, then comment
> mina test deploy
#+END_SRC
* Backup gem
#+BEGIN_SRC bash
 gem install backup -v5.0.0.beta.2
#+END_SRC

* CRON
** activate log for cron jobs
#+BEGIN_SRC bash
 sudo vi  /etc/rsyslog.d/50-default.conf
 /s #cron
 # uncomment the line
 cron.*                          /var/log/cron.log

 sudo service rsyslog restart
 sudo service cron restart
 # Cron activity will now be logged to /var/log/cron.log file (in addition to syslog).

 # to continuously monitor it
 tail -f /var/log/syslog | grep CRON

#+END_SRC


* Convert putty to ssh-agent
#+BEGIN_SRC bash
# puttygen supports exporting your private key to an OpenSSH compatible format. You can then use OpenSSH tools to recreate the public key.

# 1. Open PuttyGen
# 2. Click Load
# 3. Load your private key
# 4. Go to Conversions->Export OpenSSH and export your private key
# 5. Copy your private key to ~/.ssh/id_dsa (or id_rsa).
# 6. Create the RFC 4716 version of the public key using ssh-keygen
ssh-keygen -e -f ~/.ssh/id_dsa > ~/.ssh/id_dsa_com.pub
# 7. Convert the RFC 4716 version of the public key to the OpenSSH format:
ssh-keygen -i -f ~/.ssh/id_dsa_com.pub > ~/.ssh/id_dsa.pub
#+END_SRC

* Linux commands
** folder size
#+BEGIN_SRC bash
 # disk usage info
 df -h --total

 # each folder size
 du -sh * | sort -g
 du -sk * | sort -n

 # each folder size including hiddens
 du -sch .[!.]* * |sort -h
 # try ncdu
 sudo apt-get install ncdu
 ncdu
#+END_SRC
** system.d
#+BEGIN_SRC bash
 # nginx config test
 sudo nginx -t
 sudo nginx -t -c /etc/nginx/conf.d/taxicenter.conf

 # systemd
 # reload if unit file changed
 sudo systemctl daemon-reload
#+END_SRC

** logs
#+BEGIN_SRC bash
# read
cat /node-1.log | head -20
tail -f logs/node-1.log
jq select(.ns[1]=="consensus")
jq -c . | { "at": .at, "val": .data.H }
#+END_SRC

** bash
#+BEGIN_SRC bash
find -name all.js
for j in $(find -name all.js); do cp -v /tmp/all.js $j; done
#+END_SRC
