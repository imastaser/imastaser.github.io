<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>Arthur Vardanyan's blog</title>
        <link>http://imast.am</link>
        <description><![CDATA[]]></description>
        <atom:link href="http://imast.am/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sat, 03 Apr 2021 00:00:00 UT</lastBuildDate>
        <item>
    <title>Formal Verification of Programm (Coq)</title>
    <link>http://imast.am/mitq/logic/formal-verification.html</link>
    <description><![CDATA[<div class="post-content">
<div id="TOC"><ul>
<li><a href="#введение-в-формальную-верификацию-программ">Введение в формальную верификацию программ</a><ul>
<li><a href="#cs-клуб-2021-а.-трунов">CS клуб 2021 А. Трунов</a></li>
<li><a href="#тинькофф-2020-а.-трунов">Тинькофф 2020 А. Трунов</a></li>
</ul></li>
</ul></div>
<section id="введение-в-формальную-верификацию-программ" class="level1">
<h1>Введение в формальную верификацию программ</h1>
<section id="cs-клуб-2021-а.-трунов" class="level2">
<h2>CS клуб 2021 А. Трунов</h2>
<p>(<a href="https://compsciclub.ru/courses/2021-spring/6.926-formalverification/about/">about</a>) | (<a href="https://compsciclub.ru/courses/2021-spring/6.926-formalverification/classes/">playlist</a>) | (<a href="https://github.com/anton-trunov/csclub-coq-course-spring-2021">Материалы с курса</a>) |</p>
</section>
<section id="тинькофф-2020-а.-трунов" class="level2">
<h2>Тинькофф 2020 А. Трунов</h2>
<p>(<a href="https://www.youtube.com/playlist?list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY">playlist</a>) | (<a href="https://github.com/anton-trunov/coq-lecture-notes">Материалы с курса</a>)</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=1B2IfWxiyNU&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=1">Лекция 1. Введение в курс, основы ФП в Coq (2:04:38)</a></li>
<li><a href="https://www.youtube.com/watch?v=uiohYwJQ4xo&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=2">Лекция 2. Интуиционистская логика, равенство, язык SSReflect (2:54:50)</a></li>
<li><a href="https://www.youtube.com/watch?v=cFxIyOzdWUI&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=3">Лекция 3. Зависимые типы, кванторы. Конструкторы. Индукция (2:11:23)</a></li>
<li><a href="https://www.youtube.com/watch?v=GYMfRUCosa8&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=4">Лекция 4. Индукция и её виды: парная, сильная, структурная (2:17:52)</a></li>
<li><a href="https://www.youtube.com/watch?v=tc8qe6BnljM&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=5">Лекция 5. Reflect-предикат, зависимые типы для переписывания (1:34:36)</a></li>
<li><a href="https://www.youtube.com/watch?v=7LaRj8XU5Ic&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=6">Лекция 6. Канонические структуры. Архитектура eqType (1:21:27)</a></li>
<li><a href="https://www.youtube.com/watch?v=vm-1Gk94R8A&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=7">Лекция 7. Канонические миксины. Фантомные типы. Клоны (1:13:05)</a></li>
<li><a href="https://www.youtube.com/watch?v=AVPpL_CUbBU&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=8">Лекция 8. Подтипирование. Неразличимость доказательств (1:03:32)</a></li>
<li><a href="https://www.youtube.com/watch?v=J9HsvCVya4Y&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=9">Лекция 9. Prop и Type. Тотальность и завершаемость (1:08:12)</a></li>
<li><a href="https://www.youtube.com/watch?v=vzxYYNyiNYg&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=10">Лекция 10. Верификация функциональных алгоритмов (1:24:20)</a></li>
<li><a href="https://www.youtube.com/watch?v=CUL9Ys9uA40&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=11">Лекция 11. Деревья Брауна: подходы к реализации. Экстракция (1:28:40)</a></li>
<li><a href="https://www.youtube.com/watch?v=GAWkS09wz1o&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=12">Лекция 12. Рандомизированное тестирование: QuickChick (48:53)</a></li>
<li><a href="https://www.youtube.com/watch?v=BfnaHVz51j8&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=13">Лекция 13. Обзор подходов к верификации императивных алгоритмов (58:46)</a></li>
<li><a href="https://www.youtube.com/watch?v=cQwkQATBUkU&amp;list=PLQ-XJe6nVU5BwX1gV80aDhwW0Jt3tipIY&amp;index=14">Лекция 14. Сепарационная логика и фреймворк VST для верификации программ на Си (1:46:20)</a></li>
</ul>
</section>
</section>
</div>

<div class="row">
        <span class="date  text-right">
            <i class="fa fa-calenda"></i> Posted on April  3, 2021
        </span>
        <span class="tags text-right" style="width: 100%">
            <ul class="list-inline"><li><i class="fa fa-tags"></i></li><li><a href="/tags/coq.html">coq</a></li><li><a href="/tags/proover.html">proover</a></li><li><a href="/tags/math.html">math</a></li></ul>
        </span>
</div>
]]></description>
    <pubDate>Sat, 03 Apr 2021 00:00:00 UT</pubDate>
    <guid>http://imast.am/mitq/logic/formal-verification.html</guid>
    <dc:creator>Arthur Vardanyan</dc:creator>
</item>
<item>
    <title>Async</title>
    <link>http://imast.am/mitq/programming/async-resources.html</link>
    <description><![CDATA[<div class="post-content">
<div id="TOC"><ul>
<li><a href="#net-async-talks">.Net Async Talks</a><ul>
<li><a href="#lucian-wischik">Lucian Wischik</a></li>
<li><a href="#wintellect">Wintellect</a></li>
<li><a href="#stephen-toub">Stephen Toub</a></li>
</ul></li>
<li><a href="#net-blogs">.Net Blogs</a><ul>
<li><a href="#msdn">MSDN</a></li>
<li><a href="#stephen-toub-1">Stephen Toub</a></li>
<li><a href="#eric-lipper">Eric Lipper</a></li>
<li><a href="#raymond-chen">Raymond Chen</a></li>
<li><a href="#stephen-cleary">Stephen Cleary</a></li>
<li><a href="#i3arnon">i3arnon</a></li>
<li><a href="#code">Code</a></li>
</ul></li>
</ul></div>
<section id="net-async-talks" class="level2">
<h2>.Net Async Talks</h2>
<ul>
<li><a href="https://habr.com/en/company/jugru/blog/543380/">Многопоточность на низком уровне</a></li>
<li><a href="https://2015.dotnext-moscow.ru/talks/simonyan/">Атомарные операции и примитивы в .NET - Карлен szKarlen Симонян </a></li>
<li><a href="https://habr.com/ru/post/354748/">Мифы о кэше процессора, в которые верят программисты</a></li>
</ul>
<section id="lucian-wischik" class="level3">
<h3>Lucian Wischik</h3>
<ul>
<li><a href="https://channel9.msdn.com/Series/Three-Essential-Tips-for-Async/Three-Essential-Tips-For-Async-Introduction">Six Essential Tips For Async - Introduction</a> - Talks</li>
<li><a href="https://docs.microsoft.com/en-us/archive/blogs/lucian/talk-async-best-practices">Talk: Async best practices</a></li>
<li><a href="https://docs.microsoft.com/en-us/archive/blogs/lucian/talk-the-complete-async-three-talks-from-teched-europe-2013">Talk: The Complete Async – three talks from TechEd Europe 2013</a></li>
<li><a href="https://channel9.msdn.com/Events/TechEd/Europe/2013/DEV-B317#fbid=aIWUq0ssW74">Intro: Using Async</a></li>
<li><a href="https://channel9.msdn.com/Events/TechEd/Europe/2013/DEV-B319#fbid=aIWUq0ssW74">Three Essential Tips for Using Async in Microsoft Visual C# and Visual Basic</a> 01:06:30 - Common problems - usefull tips</li>
<li><a href="https://channel9.msdn.com/Events/TechEd/Europe/2013/DEV-B318#fbid=aIWUq0ssW74">Creating Async Libraries That Are Modular, Reusable and Fast</a></li>
</ul>
</section>
<section id="wintellect" class="level3">
<h3>Wintellect</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=CYowfMeSg_k&amp;list=PL9XzOCngAkqudQyRcJnb3bwjx8m6C_Gaw&amp;index=7">Advanced .NET Threading, Part 3: I/O-Bound Async Operations</a></li>
<li><a href="https://www.youtube.com/watch?v=KzDShvKbEMs&amp;list=PL9XzOCngAkqudQyRcJnb3bwjx8m6C_Gaw&amp;index=2">LIDNUG &amp; Wintellect Lock-Free Thread Synchronization with Jeffrey Richter</a></li>
<li><a href="https://www.youtube.com/watch?v=42-ng2eAj7Q">LIDNUG &amp; Wintellect - Performing Asynchronous IO Bound Operations</a></li>
<li><a href="https://www.youtube.com/watch?v=VNa3P5BAVrU">SWIT 2014. Джефрі Ріхтер. Performing Asynchronous I/O Bound Operations</a></li>
<li><a href="https://www.youtube.com/watch?v=ZnXOGhQrxm8&amp;feature=emb_logo">SWIT 2014. Джефрі Ріхтер. Windows Store Apps Process Model</a></li>
<li><a href="https://www.youtube.com/watch?v=gWcyXGIbRDI">Jeffrey Richter «Efficient Buffer Manipulation using C# 7.2’s Span»</a></li>
<li><a href="https://www.youtube.com/watch?v=ADd8SmmGSYI&amp;list=PL9XzOCngAkqudQyRcJnb3bwjx8m6C_Gaw&amp;index=13">Jeffrey Richter — Generics</a></li>
<li><a href="https://www.wintellectnow.com/Home/Instructor?instructorId=JeffreyRichter">Wintellect Now video list</a></li>
</ul>
</section>
<section id="stephen-toub" class="level3">
<h3>Stephen Toub</h3>
<ul>
<li><a href="https://channel9.msdn.com/Shows/On-NET/Understanding-how-to-use-Task-and-ValueTask">Understanding how to use Task Valsk</a></li>
</ul>
</section>
</section>
<section id="net-blogs" class="level2">
<h2>.Net Blogs</h2>
<section id="msdn" class="level3">
<h3>MSDN</h3>
<ul>
<li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/async">Asynchronous programming</a></li>
<li><a href="https://docs.microsoft.com/en-us/dotnet/standard/async-in-depth">Async in depth</a></li>
</ul>
</section>
<section id="stephen-toub-1" class="level3">
<h3>Stephen Toub</h3>
<ul>
<li><a href="https://devblogs.microsoft.com/pfxteam/tasks-monads-and-linq/">Tasks, Monads, and LINQ</a></li>
<li><a href="https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/">Task.Run vs Task.Factory.StartNew</a></li>
<li><a href="https://devblogs.microsoft.com/pfxteam/task-factory-startnew-vs-new-task-start/">“Task.Factory.StartNew” vs “new Task(…).Start”</a></li>
</ul>
</section>
<section id="eric-lipper" class="level3">
<h3>Eric Lipper</h3>
<ul>
<li><a href="https://ericlippert.com/category/monads/">series exploring monads and C#</a></li>
<li><a href="https://ericlippert.com/category/conwayslife/">Conways Life game</a></li>
</ul>
</section>
<section id="raymond-chen" class="level3">
<h3>Raymond Chen</h3>
<ul>
<li><a href="https://devblogs.microsoft.com/oldnewthing/">Raymond Chen blog</a></li>
</ul>
</section>
<section id="stephen-cleary" class="level3">
<h3>Stephen Cleary</h3>
<ul>
<li><a href="https://blog.stephencleary.com/2013/08/startnew-is-dangerous.html">StartNew is Dangerous</a></li>
</ul>
</section>
<section id="i3arnon" class="level3">
<h3>i3arnon</h3>
<ul>
<li><a href="http://blog.i3arnon.com/2015/07/02/task-run-long-running/">LongRunning Is Useless For Task.Run With Async/Await</a></li>
<li><a href="https://stackoverflow.com/questions/24777253/waiting-for-async-await-inside-a-task/24777502#24777502">SO Answer</a></li>
<li><a href="https://stackoverflow.com/questions/26921191/how-to-pass-longrunning-flag-specifically-to-task-run">SO-How to pass LongRunning flag specifically to Task.Run()?</a></li>
</ul>
</section>
<section id="code" class="level3">
<h3>Code</h3>
<div class="sourceCode" id="cb1" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1"></a>Task&lt;<span class="dt">int</span>&gt; t = FredAsync(<span class="st">&quot;&quot;</span>);   <span class="co">// ArgumentException(&quot;a&quot;)</span></span>
<span id="cb1-2"><a href="#cb1-2"></a>try {</span>
<span id="cb1-3"><a href="#cb1-3"></a>  <span class="dt">int</span> i = await t;  <span class="co">// async version</span></span>
<span id="cb1-4"><a href="#cb1-4"></a>}</span>
<span id="cb1-5"><a href="#cb1-5"></a>catch (ArgumentException ex)</span>
<span id="cb1-6"><a href="#cb1-6"></a>{</span>
<span id="cb1-7"><a href="#cb1-7"></a>}</span>
<span id="cb1-8"><a href="#cb1-8"></a></span>
<span id="cb1-9"><a href="#cb1-9"></a>----</span>
<span id="cb1-10"><a href="#cb1-10"></a></span>
<span id="cb1-11"><a href="#cb1-11"></a>try {</span>
<span id="cb1-12"><a href="#cb1-12"></a>  <span class="dt">int</span> i = t.Result;  <span class="co">// (2) problems</span></span>
<span id="cb1-13"><a href="#cb1-13"></a>}</span>
<span id="cb1-14"><a href="#cb1-14"></a>catch (AggregateException ex)</span>
<span id="cb1-15"><a href="#cb1-15"></a>{</span>
<span id="cb1-16"><a href="#cb1-16"></a>}</span>
<span id="cb1-17"><a href="#cb1-17"></a></span>
<span id="cb1-18"><a href="#cb1-18"></a>------</span>
<span id="cb1-19"><a href="#cb1-19"></a></span>
<span id="cb1-20"><a href="#cb1-20"></a>try {</span>
<span id="cb1-21"><a href="#cb1-21"></a>   <span class="dt">int</span> i = t.GetResult(); <span class="co">// for WinRT ops, this will FAIL if op</span></span>
<span id="cb1-22"><a href="#cb1-22"></a>                          <span class="co">// isn&#39;t yet completed</span></span>
<span id="cb1-23"><a href="#cb1-23"></a></span>
<span id="cb1-24"><a href="#cb1-24"></a>   <span class="dt">int</span> i = t.GetAwaiter().GetResult();</span>
<span id="cb1-25"><a href="#cb1-25"></a>   <span class="co">// still bad because it blocks the calling thread</span></span>
<span id="cb1-26"><a href="#cb1-26"></a>   <span class="co">// AND hidden from intellisense</span></span>
<span id="cb1-27"><a href="#cb1-27"></a>   <span class="co">// until the task completes</span></span>
<span id="cb1-28"><a href="#cb1-28"></a>   <span class="co">// but at least it gets the same exception as </span></span>
<span id="cb1-29"><a href="#cb1-29"></a>}</span>
<span id="cb1-30"><a href="#cb1-30"></a>catch (ArgumentException ex)</span>
<span id="cb1-31"><a href="#cb1-31"></a>{</span>
<span id="cb1-32"><a href="#cb1-32"></a>}</span>
<span id="cb1-33"><a href="#cb1-33"></a></span>
<span id="cb1-34"><a href="#cb1-34"></a></span>
<span id="cb1-35"><a href="#cb1-35"></a></span>
<span id="cb1-36"><a href="#cb1-36"></a></span>
<span id="cb1-37"><a href="#cb1-37"></a>...</span>
<span id="cb1-38"><a href="#cb1-38"></a>Task&lt;<span class="dt">int</span>&gt; t = AlphaAsync();  <span class="co">// first function: exception is raised here</span></span>
<span id="cb1-39"><a href="#cb1-39"></a><span class="dt">int</span> i = await t;             <span class="co">// second function: exception is raised here!</span></span>
<span id="cb1-40"><a href="#cb1-40"></a></span>
<span id="cb1-41"><a href="#cb1-41"></a>async Task&lt;<span class="dt">int</span>&gt; AlphaAsync()</span>
<span id="cb1-42"><a href="#cb1-42"></a>{</span>
<span id="cb1-43"><a href="#cb1-43"></a>   Console.WriteLine(<span class="st">&quot;hello&quot;</span>);</span>
<span id="cb1-44"><a href="#cb1-44"></a>   throw new ArgumentException(<span class="st">&quot;no arguments&quot;</span>); <span class="co">// this exception is stored inside</span></span>
<span id="cb1-45"><a href="#cb1-45"></a>                                                <span class="co">// the &quot;Task&quot; that&#39;s returned from AlphaAsync</span></span>
<span id="cb1-46"><a href="#cb1-46"></a>   <span class="cf">return</span> await BetaAsync();</span>
<span id="cb1-47"><a href="#cb1-47"></a>}</span>
<span id="cb1-48"><a href="#cb1-48"></a></span>
<span id="cb1-49"><a href="#cb1-49"></a>Task&lt;<span class="dt">int</span>&gt; AlphaAsync()</span>
<span id="cb1-50"><a href="#cb1-50"></a>{</span>
<span id="cb1-51"><a href="#cb1-51"></a>   Console.WriteLine(<span class="st">&quot;hello&quot;</span>);</span>
<span id="cb1-52"><a href="#cb1-52"></a>   throw new ArgumentException(<span class="st">&quot;no arguments&quot;</span>); <span class="co">// this throws an exception back to the caller</span></span>
<span id="cb1-53"><a href="#cb1-53"></a>   <span class="cf">return</span> BetaAsync();</span>
<span id="cb1-54"><a href="#cb1-54"></a>}</span>
<span id="cb1-55"><a href="#cb1-55"></a></span>
<span id="cb1-56"><a href="#cb1-56"></a></span>
<span id="cb1-57"><a href="#cb1-57"></a></span>
<span id="cb1-58"><a href="#cb1-58"></a></span>
<span id="cb1-59"><a href="#cb1-59"></a></span>
<span id="cb1-60"><a href="#cb1-60"></a>async Task&lt;<span class="dt">int</span>&gt; BetaAsync()</span>
<span id="cb1-61"><a href="#cb1-61"></a>{</span>
<span id="cb1-62"><a href="#cb1-62"></a>  await Task.Delay(<span class="dv">10</span>);</span>
<span id="cb1-63"><a href="#cb1-63"></a>  <span class="cf">return</span> <span class="dv">10</span>;</span>
<span id="cb1-64"><a href="#cb1-64"></a>}</span>
<span id="cb1-65"><a href="#cb1-65"></a></span>
<span id="cb1-66"><a href="#cb1-66"></a></span>
<span id="cb1-67"><a href="#cb1-67"></a></span>
<span id="cb1-68"><a href="#cb1-68"></a></span>
<span id="cb1-69"><a href="#cb1-69"></a>class Page1</span>
<span id="cb1-70"><a href="#cb1-70"></a>{</span>
<span id="cb1-71"><a href="#cb1-71"></a>   CancellationTokenSource cts = new CancellationTokenSource();</span>
<span id="cb1-72"><a href="#cb1-72"></a></span>
<span id="cb1-73"><a href="#cb1-73"></a>   async <span class="dt">void</span> Button1Click()</span>
<span id="cb1-74"><a href="#cb1-74"></a>   {</span>
<span id="cb1-75"><a href="#cb1-75"></a>      try</span>
<span id="cb1-76"><a href="#cb1-76"></a>      {</span>
<span id="cb1-77"><a href="#cb1-77"></a><span class="co">//       cts.CancelAfter(2000);</span></span>
<span id="cb1-78"><a href="#cb1-78"></a>         var s = await httpClient.GetStringAsync(url, cts.Token);</span>
<span id="cb1-79"><a href="#cb1-79"></a><span class="co">//         cts.Token.ThrowIfCancellationRequested(); // I could do this if GetStringAsync didn&#39;t offer it</span></span>
<span id="cb1-80"><a href="#cb1-80"></a>         label1.Text = s;</span>
<span id="cb1-81"><a href="#cb1-81"></a>      }</span>
<span id="cb1-82"><a href="#cb1-82"></a>      catch (OperationCanceledException ex)</span>
<span id="cb1-83"><a href="#cb1-83"></a>      {</span>
<span id="cb1-84"><a href="#cb1-84"></a>         label1.Text = <span class="st">&quot;Cancelled&quot;</span>;</span>
<span id="cb1-85"><a href="#cb1-85"></a>      }</span>
<span id="cb1-86"><a href="#cb1-86"></a>   }</span>
<span id="cb1-87"><a href="#cb1-87"></a></span>
<span id="cb1-88"><a href="#cb1-88"></a></span>
<span id="cb1-89"><a href="#cb1-89"></a>   <span class="dt">void</span> CancelButtonClick()</span>
<span id="cb1-90"><a href="#cb1-90"></a>   {</span>
<span id="cb1-91"><a href="#cb1-91"></a>      cts.Cancel();</span>
<span id="cb1-92"><a href="#cb1-92"></a>   }</span>
<span id="cb1-93"><a href="#cb1-93"></a>}</span>
<span id="cb1-94"><a href="#cb1-94"></a></span>
<span id="cb1-95"><a href="#cb1-95"></a><span class="co">// VOICE OF STEPHEN(S): If you&#39;re writing a library API that takes CancellationToken,</span></span>
<span id="cb1-96"><a href="#cb1-96"></a><span class="co">// then you should certainly CHECK it, and you should certainly</span></span>
<span id="cb1-97"><a href="#cb1-97"></a><span class="co">// expose cancellation by throwing OperationCanceledException.</span></span>
<span id="cb1-98"><a href="#cb1-98"></a><span class="co">// That&#39;s just what everyone expects.</span></span>
<span id="cb1-99"><a href="#cb1-99"></a><span class="co">//</span></span>
<span id="cb1-100"><a href="#cb1-100"></a><span class="co">// (but in your own user-code, you can violate that rule if it seems wise. It&#39;s a dangerous</span></span>
<span id="cb1-101"><a href="#cb1-101"></a><span class="co">// pattern because easy to fall into traps.)</span></span>
<span id="cb1-102"><a href="#cb1-102"></a><span class="co">//</span></span>
<span id="cb1-103"><a href="#cb1-103"></a></span>
<span id="cb1-104"><a href="#cb1-104"></a>Task object has several states</span>
<span id="cb1-105"><a href="#cb1-105"></a>  * NotYetCompleted</span>
<span id="cb1-106"><a href="#cb1-106"></a>  * CompletedWithSuccess</span>
<span id="cb1-107"><a href="#cb1-107"></a>  * CompletedWithFailure</span>
<span id="cb1-108"><a href="#cb1-108"></a>  * Cancelled</span>
<span id="cb1-109"><a href="#cb1-109"></a>The async/await machinery make the last two states look the same. But internally they are</span>
<span id="cb1-110"><a href="#cb1-110"></a>different.</span>
<span id="cb1-111"><a href="#cb1-111"></a></span>
<span id="cb1-112"><a href="#cb1-112"></a></span>
<span id="cb1-113"><a href="#cb1-113"></a></span>
<span id="cb1-114"><a href="#cb1-114"></a></span>
<span id="cb1-115"><a href="#cb1-115"></a></span>
<span id="cb1-116"><a href="#cb1-116"></a>async Task MyApiWithOptionalCancellationAsync(CancellationToken cancel = null)</span>
<span id="cb1-117"><a href="#cb1-117"></a>{</span>
<span id="cb1-118"><a href="#cb1-118"></a>   <span class="cf">while</span> (true)</span>
<span id="cb1-119"><a href="#cb1-119"></a>   {</span>
<span id="cb1-120"><a href="#cb1-120"></a>     await Task.Delay(<span class="dv">100</span>);</span>
<span id="cb1-121"><a href="#cb1-121"></a>     cancel.ThrowIfCancellationRequested();</span>
<span id="cb1-122"><a href="#cb1-122"></a>     <span class="co">// equivalent: if (cts.Token.IsCancellationRequested) throw new OperationCanceledException();</span></span>
<span id="cb1-123"><a href="#cb1-123"></a>   }</span>
<span id="cb1-124"><a href="#cb1-124"></a>   <span class="co">// (pointless, since Task.Delay takes a CancellationToken, but shown here just for fun)</span></span>
<span id="cb1-125"><a href="#cb1-125"></a>}</span>
<span id="cb1-126"><a href="#cb1-126"></a></span>
<span id="cb1-127"><a href="#cb1-127"></a></span>
<span id="cb1-128"><a href="#cb1-128"></a></span>
<span id="cb1-129"><a href="#cb1-129"></a>--------------------------------</span>
<span id="cb1-130"><a href="#cb1-130"></a></span>
<span id="cb1-131"><a href="#cb1-131"></a></span>
<span id="cb1-132"><a href="#cb1-132"></a>We have an API that is SYNCHRONOUS.</span>
<span id="cb1-133"><a href="#cb1-133"></a>We want to make it asynchronous - so it&#39;s easier to call from the UI thread</span>
<span id="cb1-134"><a href="#cb1-134"></a>We have a large business project which is built around the assumption of synchronicity throughout.</span>
<span id="cb1-135"><a href="#cb1-135"></a></span>
<span id="cb1-136"><a href="#cb1-136"></a>(<span class="dv">1</span>) BEWARE of the following... don&#39;t <span class="cf">do</span> it inside a re-usable library</span>
<span id="cb1-137"><a href="#cb1-137"></a>async Task&lt;<span class="dt">int</span>&gt; FooAsync()</span>
<span id="cb1-138"><a href="#cb1-138"></a>{</span>
<span id="cb1-139"><a href="#cb1-139"></a>   <span class="cf">return</span> Task.Run(_ =&gt; Foo());</span>
<span id="cb1-140"><a href="#cb1-140"></a>}</span>
<span id="cb1-141"><a href="#cb1-141"></a></span>
<span id="cb1-142"><a href="#cb1-142"></a></span>
<span id="cb1-143"><a href="#cb1-143"></a>(<span class="dv">2</span>) Start by looking at the <span class="st">&quot;leaf&quot;</span> of your call-chart, i.e. look at the APIs that</span>
<span id="cb1-144"><a href="#cb1-144"></a>you&#39;re invoking, and see <span class="cf">if</span> any of them have true async alternatives. Then bubble this</span>
<span id="cb1-145"><a href="#cb1-145"></a>up layer by layer. You can have two parallel sets of functions, one sync, one async.</span>
<span id="cb1-146"><a href="#cb1-146"></a>Over time, more and more functionality will be exposed both async and sync.</span>
<span id="cb1-147"><a href="#cb1-147"></a></span>
<span id="cb1-148"><a href="#cb1-148"></a>Do this <span class="cf">if</span> you&#39;re aiming <span class="cf">for</span> scalability benefits.</span>
<span id="cb1-149"><a href="#cb1-149"></a>This option is generally better.</span>
<span id="cb1-150"><a href="#cb1-150"></a>First places to look: anything that does IO - database, file access, network, ...</span>
<span id="cb1-151"><a href="#cb1-151"></a></span>
<span id="cb1-152"><a href="#cb1-152"></a>If you can&#39;t find async alternatives <span class="cf">for</span> your leaves, then wrapping them up in</span>
<span id="cb1-153"><a href="#cb1-153"></a>Task.Run as per (<span class="dv">1</span>) will NOT help your scalability. It will in fact hurt it.</span>
<span id="cb1-154"><a href="#cb1-154"></a></span>
<span id="cb1-155"><a href="#cb1-155"></a>Note: the async leaves that are offered to you in the .NET framework are NOT</span>
<span id="cb1-156"><a href="#cb1-156"></a>implemented using the threadpool. They are all done in a <span class="st">&quot;true async&quot;</span> way.</span>
<span id="cb1-157"><a href="#cb1-157"></a>That&#39;s the right way to <span class="cf">do</span> it.</span>
<span id="cb1-158"><a href="#cb1-158"></a></span>
<span id="cb1-159"><a href="#cb1-159"></a>Q. How does it even work? Is it really async all the way down? Isn&#39;t that impossible?</span>
<span id="cb1-160"><a href="#cb1-160"></a>A. No! The OperatingSystem uses IO-Completion-Ports and IRQs and TimerInterrupts and things.</span>
<span id="cb1-161"><a href="#cb1-161"></a>It doesn&#39;t need to <span class="cf">do</span> busy waits. (or, <span class="cf">if</span> it wants, it can make <span class="cf">do</span> with just one single</span>
<span id="cb1-162"><a href="#cb1-162"></a>busy thread that dispatches off to hundreds/thousands of other threads).</span>
<span id="cb1-163"><a href="#cb1-163"></a></span>
<span id="cb1-164"><a href="#cb1-164"></a>TaskCompletionSource is the primary way that we build our OWN leaves, out of things</span>
<span id="cb1-165"><a href="#cb1-165"></a>that don&#39;t otherwise already have async APIs. e.g. <span class="cf">if</span> the hardware comes back with</span>
<span id="cb1-166"><a href="#cb1-166"></a>data (e.g. on disk controller or USB port or whatever), then that interrupt will call</span>
<span id="cb1-167"><a href="#cb1-167"></a>TaskCompletionSource.SetResult()... or its equivalent.</span>
<span id="cb1-168"><a href="#cb1-168"></a></span>
<span id="cb1-169"><a href="#cb1-169"></a>Note: Task.Run&#39;s implementation is (<span class="dv">1</span>) create a new TaskCompletionSource, (<span class="dv">2</span>)</span>
<span id="cb1-170"><a href="#cb1-170"></a>queue a user workitem on the threadpool, (<span class="dv">3</span>) when that user workitem finishes, then</span>
<span id="cb1-171"><a href="#cb1-171"></a>it calls TaskCompletionSource.SetResult.</span>
<span id="cb1-172"><a href="#cb1-172"></a></span>
<span id="cb1-173"><a href="#cb1-173"></a>?? node.js? Well, that&#39;s a lot like a hypothetical version of .NET Framework which never exposes</span>
<span id="cb1-174"><a href="#cb1-174"></a>blocking APIs. And it&#39;s like WinRT also!</span>
<span id="cb1-175"><a href="#cb1-175"></a></span>
<span id="cb1-176"><a href="#cb1-176"></a></span>
<span id="cb1-177"><a href="#cb1-177"></a></span>
<span id="cb1-178"><a href="#cb1-178"></a></span>
<span id="cb1-179"><a href="#cb1-179"></a>(<span class="dv">3</span>) If your goal is just to free up the UI thread - this doesn&#39;t require a whole</span>
<span id="cb1-180"><a href="#cb1-180"></a>rewrite. You can use solution (<span class="dv">1</span>) inside this <span class="cf">case</span>.</span>
<span id="cb1-181"><a href="#cb1-181"></a></span>
<span id="cb1-182"><a href="#cb1-182"></a>Do this <span class="cf">if</span> you&#39;re aiming <span class="cf">for</span> UI responsiveness.</span>
<span id="cb1-183"><a href="#cb1-183"></a></span>
<span id="cb1-184"><a href="#cb1-184"></a></span>
<span id="cb1-185"><a href="#cb1-185"></a>Task t = Task.Delay(<span class="dv">100</span>);</span>
<span id="cb1-186"><a href="#cb1-186"></a></span>
<span id="cb1-187"><a href="#cb1-187"></a></span>
<span id="cb1-188"><a href="#cb1-188"></a></span>
<span id="cb1-189"><a href="#cb1-189"></a>------------------</span>
<span id="cb1-190"><a href="#cb1-190"></a></span>
<span id="cb1-191"><a href="#cb1-191"></a>Q. How about using Task to wrap around TPL (e.g. Parallel.For or linq AsEnumerable) ?</span>
<span id="cb1-192"><a href="#cb1-192"></a>I might want to <span class="cf">do</span> that <span class="cf">if</span> I want my UI thread to initiate some threadpool CPU-bound work.</span>
<span id="cb1-193"><a href="#cb1-193"></a></span>
<span id="cb1-194"><a href="#cb1-194"></a>The <span class="st">&quot;Task&quot;</span> type has two distinct modes of operation:</span>
<span id="cb1-195"><a href="#cb1-195"></a>* <span class="fl">1.</span> solely as an object which is tickled by TaskCompletionSource (<span class="st">&quot;promises&quot;</span>)</span>
<span id="cb1-196"><a href="#cb1-196"></a>* <span class="fl">2.</span> also, separately, as a way to queue compute-bound stuff up on the threadpool (<span class="st">&quot;futures&quot;</span>)</span>
<span id="cb1-197"><a href="#cb1-197"></a></span>
<span id="cb1-198"><a href="#cb1-198"></a>I can await either of these two kinds of things equally.</span>
<span id="cb1-199"><a href="#cb1-199"></a></span>
<span id="cb1-200"><a href="#cb1-200"></a>Parallel.For is really just a Task-generator (generates lots of mode [<span class="dv">2</span>] tasks to <span class="cf">do</span> work).</span>
<span id="cb1-201"><a href="#cb1-201"></a>The implementation is kind of like calling <span class="st">&quot;Task.Run(lambda)&quot;</span> on a list of items, so all</span>
<span id="cb1-202"><a href="#cb1-202"></a>the lambdas get queued up to the threadpool, and blocking until all are finished.</span>
<span id="cb1-203"><a href="#cb1-203"></a></span>
<span id="cb1-204"><a href="#cb1-204"></a>BD</span>
<span id="cb1-205"><a href="#cb1-205"></a>Q. Why didn&#39;t we name them with the <span class="st">&quot;Async&quot;</span> suffix?</span>
<span id="cb1-206"><a href="#cb1-206"></a>await Task.DelayAsync(<span class="dv">1000</span>);</span>
<span id="cb1-207"><a href="#cb1-207"></a>await Task.WhenAllAsync(t1,t2,t3);</span>
<span id="cb1-208"><a href="#cb1-208"></a>await Task.RunAsync(_ =&gt; cpu_bound_work());</span>
<span id="cb1-209"><a href="#cb1-209"></a></span>
<span id="cb1-210"><a href="#cb1-210"></a></span>
<span id="cb1-211"><a href="#cb1-211"></a></span>
<span id="cb1-212"><a href="#cb1-212"></a><span class="co">// The following code returns immediately</span></span>
<span id="cb1-213"><a href="#cb1-213"></a>Parallel.For(<span class="dv">0</span>,<span class="dv">10</span>, async i =&gt; { await Task.Delay(<span class="dv">1000</span>) });</span>
<span id="cb1-214"><a href="#cb1-214"></a></span>
<span id="cb1-215"><a href="#cb1-215"></a><span class="co">// option 1: this is an alter</span></span>
<span id="cb1-216"><a href="#cb1-216"></a>await Task.WhenAll(Enumerable.Range(<span class="dv">1</span>,<span class="dv">10</span>)</span>
<span id="cb1-217"><a href="#cb1-217"></a>                   .Select(async _ =&gt; await Task.Delay(<span class="dv">1000</span>)));</span>
<span id="cb1-218"><a href="#cb1-218"></a></span>
<span id="cb1-219"><a href="#cb1-219"></a><span class="co">// option 2: I could also stick in .AsParallel()...</span></span>
<span id="cb1-220"><a href="#cb1-220"></a>Enumerable.Range(<span class="dv">1</span>,<span class="dv">10</span>)</span>
<span id="cb1-221"><a href="#cb1-221"></a>          .AsParallel()</span>
<span id="cb1-222"><a href="#cb1-222"></a>          .Select(_ =&gt; cpu_bound_work())</span>
<span id="cb1-223"><a href="#cb1-223"></a>          .Count();</span>
<span id="cb1-224"><a href="#cb1-224"></a></span>
<span id="cb1-225"><a href="#cb1-225"></a>-----------------------------------------------</span>
<span id="cb1-226"><a href="#cb1-226"></a></span>
<span id="cb1-227"><a href="#cb1-227"></a>Q. We&#39;ve heard that the benefit of async is</span>
<span id="cb1-228"><a href="#cb1-228"></a>(<span class="dv">1</span>) don&#39;t tie up UI thread (or other particular threads)</span>
<span id="cb1-229"><a href="#cb1-229"></a>(<span class="dv">2</span>) improve server scalability - make it more respnsive to spikes in load, and</span>
<span id="cb1-230"><a href="#cb1-230"></a>make it able to serve a higher concurrent rate of requests.</span>
<span id="cb1-231"><a href="#cb1-231"></a>   ... first benefit is that you save the thread <span class="st">&quot;occupation time&quot;</span>,</span>
<span id="cb1-232"><a href="#cb1-232"></a>       but you still have the same TimeToFirstByte</span>
<span id="cb1-233"><a href="#cb1-233"></a>   ... second benefit, <span class="cf">if</span> you need to gather multiple stuff together,</span>
<span id="cb1-234"><a href="#cb1-234"></a>       async makes it easier to initiate multiple subrequests in parallel</span>
<span id="cb1-235"><a href="#cb1-235"></a></span>
<span id="cb1-236"><a href="#cb1-236"></a>But how does (<span class="dv">2</span>) actually work in practice?</span>
<span id="cb1-237"><a href="#cb1-237"></a></span>
<span id="cb1-238"><a href="#cb1-238"></a>public class AttendeePriceController : ApiController</span>
<span id="cb1-239"><a href="#cb1-239"></a>{</span>
<span id="cb1-240"><a href="#cb1-240"></a>    <span class="co">// GET api/&lt;controller&gt;</span></span>
<span id="cb1-241"><a href="#cb1-241"></a>    public async List&lt;AttendeePrice&gt; Get()</span>
<span id="cb1-242"><a href="#cb1-242"></a>    {</span>
<span id="cb1-243"><a href="#cb1-243"></a>        using (var db = new MyContext())</span>
<span id="cb1-244"><a href="#cb1-244"></a>        {</span>
<span id="cb1-245"><a href="#cb1-245"></a>            <span class="cf">return</span> db.AttendeePrices.ToList(); <span class="co">// imagine that this blocks the</span></span>
<span id="cb1-246"><a href="#cb1-246"></a>                   <span class="co">// ASP.Net thread, so the ASP.Net thread is tied up and</span></span>
<span id="cb1-247"><a href="#cb1-247"></a>                   <span class="co">// can&#39;t be used elsewhere</span></span>
<span id="cb1-248"><a href="#cb1-248"></a>        }</span>
<span id="cb1-249"><a href="#cb1-249"></a>    }</span>
<span id="cb1-250"><a href="#cb1-250"></a>}</span>
<span id="cb1-251"><a href="#cb1-251"></a></span>
<span id="cb1-252"><a href="#cb1-252"></a>Is this example actually *improved* by making it async?</span>
<span id="cb1-253"><a href="#cb1-253"></a>(I believe so, yes...)</span>
<span id="cb1-254"><a href="#cb1-254"></a></span>
<span id="cb1-255"><a href="#cb1-255"></a>public class AttendeePriceController : ApiController</span>
<span id="cb1-256"><a href="#cb1-256"></a>{</span>
<span id="cb1-257"><a href="#cb1-257"></a>    <span class="co">// GET api/&lt;controller&gt;</span></span>
<span id="cb1-258"><a href="#cb1-258"></a>    public async Task&lt;List&lt;AttendeePrice&gt;&gt; Get()</span>
<span id="cb1-259"><a href="#cb1-259"></a>    {</span>
<span id="cb1-260"><a href="#cb1-260"></a>        List&lt;AttendeePrice&gt; attendeesPriceList;</span>
<span id="cb1-261"><a href="#cb1-261"></a>        using (var db = new MyContext())</span>
<span id="cb1-262"><a href="#cb1-262"></a>        {</span>
<span id="cb1-263"><a href="#cb1-263"></a>            attendeesPriceList = await db.AttendeePrices.ToListAsync();</span>
<span id="cb1-264"><a href="#cb1-264"></a>        }</span>
<span id="cb1-265"><a href="#cb1-265"></a>        <span class="cf">return</span> attendeesPriceList;</span>
<span id="cb1-266"><a href="#cb1-266"></a>    }</span>
<span id="cb1-267"><a href="#cb1-267"></a>}</span>
<span id="cb1-268"><a href="#cb1-268"></a></span>
<span id="cb1-269"><a href="#cb1-269"></a></span>
<span id="cb1-270"><a href="#cb1-270"></a></span>
<span id="cb1-271"><a href="#cb1-271"></a>--------------</span>
<span id="cb1-272"><a href="#cb1-272"></a></span>
<span id="cb1-273"><a href="#cb1-273"></a>Q. I&#39;m making screenscrapes. I make the first screenscrape, then based on that</span>
<span id="cb1-274"><a href="#cb1-274"></a>I make subsequent further screenscrapes and write them to disk. I&#39;m having</span>
<span id="cb1-275"><a href="#cb1-275"></a>a hard time keeping them all together and wrap my head around them.</span>
<span id="cb1-276"><a href="#cb1-276"></a>What really is a good architecture here?</span>
<span id="cb1-277"><a href="#cb1-277"></a></span>
<span id="cb1-278"><a href="#cb1-278"></a></span>
<span id="cb1-279"><a href="#cb1-279"></a>TODO: Lucian&#39;s sample of scraping+encoding would be a good one.</span>
<span id="cb1-280"><a href="#cb1-280"></a></span>
<span id="cb1-281"><a href="#cb1-281"></a></span>
<span id="cb1-282"><a href="#cb1-282"></a>Q. How <span class="cf">do</span> I make several concurrent requests that are heterogenous</span>
<span id="cb1-283"><a href="#cb1-283"></a></span>
<span id="cb1-284"><a href="#cb1-284"></a></span>
<span id="cb1-285"><a href="#cb1-285"></a>var q = new Queue&lt;Func&lt;Task&gt;&gt;();</span>
<span id="cb1-286"><a href="#cb1-286"></a>q.Add( async _ =&gt; {var s = await GetStringAsync(); DoWhatIWantWithS(s);} );</span>
<span id="cb1-287"><a href="#cb1-287"></a>q.Add( async _ =&gt; {var i = await GetIntAsync(); DoWhatIWantWithI(i);} );</span>
<span id="cb1-288"><a href="#cb1-288"></a><span class="co">// Now I can manage the queue uniformally (and throttle it)</span></span>
<span id="cb1-289"><a href="#cb1-289"></a><span class="co">// But the return-type remains strongly typed in all cases</span></span>
<span id="cb1-290"><a href="#cb1-290"></a><span class="co">// Q. But is it really worth it? Doesn&#39;t look better than an explicit cast to me...</span></span>
<span id="cb1-291"><a href="#cb1-291"></a></span>
<span id="cb1-292"><a href="#cb1-292"></a></span>
<span id="cb1-293"><a href="#cb1-293"></a></span>
<span id="cb1-294"><a href="#cb1-294"></a>SemaphoreSlim -- generally, use this instead of the <span class="st">&quot;lock&quot;</span> statement <span class="cf">if</span> you have awaits.</span>
<span id="cb1-295"><a href="#cb1-295"></a>e.g.</span>
<span id="cb1-296"><a href="#cb1-296"></a></span>
<span id="cb1-297"><a href="#cb1-297"></a>SemaphoreSlim s = new SemaphoreSlim(<span class="dv">1</span>);</span>
<span id="cb1-298"><a href="#cb1-298"></a>await s.WaitAsync();   <span class="co">// nb. can also do s.Wait() to block my thread until available.</span></span>
<span id="cb1-299"><a href="#cb1-299"></a>...</span>
<span id="cb1-300"><a href="#cb1-300"></a>s.Release();</span>
<span id="cb1-301"><a href="#cb1-301"></a></span>
<span id="cb1-302"><a href="#cb1-302"></a><span class="co">// Semaphore has a counter saying how many spaces are available in the critical region</span></span>
<span id="cb1-303"><a href="#cb1-303"></a><span class="co">// Initialize to 1 means &quot;only 1&quot;</span></span>
<span id="cb1-304"><a href="#cb1-304"></a></span>
<span id="cb1-305"><a href="#cb1-305"></a><span class="co">// SemaphoreSlim.WaitAsync -- queues you up until there&#39;s space available.</span></span>
<span id="cb1-306"><a href="#cb1-306"></a></span>
<span id="cb1-307"><a href="#cb1-307"></a><span class="co">// All it does is cause other people who &quot;await s.WaitAsync()&quot; to be stopped in their tracks</span></span>
<span id="cb1-308"><a href="#cb1-308"></a><span class="co">// until I&#39;ve done Release().</span></span>
<span id="cb1-309"><a href="#cb1-309"></a></span>
<span id="cb1-310"><a href="#cb1-310"></a>NB. Semaphores are *not* re-entrant, but Monitors (<span class="st">&quot;lock/&quot;</span> statement</span>
<span id="cb1-311"><a href="#cb1-311"></a></span>
<span id="cb1-312"><a href="#cb1-312"></a></span>
<span id="cb1-313"><a href="#cb1-313"></a>Q. How to prevent re-entrancy? Well, SemaphoreSlim is one option, and it&#39;s </span>
<span id="cb1-314"><a href="#cb1-314"></a></span>
<span id="cb1-315"><a href="#cb1-315"></a></span>
<span id="cb1-316"><a href="#cb1-316"></a>Async Sub Button1Click(sender As Object)</span>
<span id="cb1-317"><a href="#cb1-317"></a>  Button1.Enabled = False</span>
<span id="cb1-318"><a href="#cb1-318"></a>  Try</span>
<span id="cb1-319"><a href="#cb1-319"></a>    ...</span>
<span id="cb1-320"><a href="#cb1-320"></a>  Finally</span>
<span id="cb1-321"><a href="#cb1-321"></a>    Button1.Enabled = True</span>
<span id="cb1-322"><a href="#cb1-322"></a>  End Try</span>
<span id="cb1-323"><a href="#cb1-323"></a>End Sub</span>
<span id="cb1-324"><a href="#cb1-324"></a></span>
<span id="cb1-325"><a href="#cb1-325"></a>NOTE: This solution with Enabled is fine <span class="cf">if</span> we can assume that we&#39;re only ever called</span>
<span id="cb1-326"><a href="#cb1-326"></a>from a single thread. But it will have errors -- race conditions -- <span class="cf">if</span> there were</span>
<span id="cb1-327"><a href="#cb1-327"></a>multiple threads trying to <span class="cf">do</span> it.</span>
<span id="cb1-328"><a href="#cb1-328"></a></span>
<span id="cb1-329"><a href="#cb1-329"></a>Joe Albahari has a neat article on the perf of <span class="st">&quot;slim&quot;</span> stuff. SemaphoreSlim is VERY efficient!</span>
<span id="cb1-330"><a href="#cb1-330"></a></span>
<span id="cb1-331"><a href="#cb1-331"></a></span>
<span id="cb1-332"><a href="#cb1-332"></a>---------------</span>
<span id="cb1-333"><a href="#cb1-333"></a></span>
<span id="cb1-334"><a href="#cb1-334"></a>Q. Console app.</span>
<span id="cb1-335"><a href="#cb1-335"></a><span class="dt">static</span> <span class="dt">void</span> Main()</span>
<span id="cb1-336"><a href="#cb1-336"></a>{</span>
<span id="cb1-337"><a href="#cb1-337"></a>   MainAsync().GetAwaiter().GetResult();</span>
<span id="cb1-338"><a href="#cb1-338"></a>}</span>
<span id="cb1-339"><a href="#cb1-339"></a></span>
<span id="cb1-340"><a href="#cb1-340"></a><span class="dt">static</span> Task MainAsync()</span>
<span id="cb1-341"><a href="#cb1-341"></a>{</span>
<span id="cb1-342"><a href="#cb1-342"></a>  <span class="co">//</span></span>
<span id="cb1-343"><a href="#cb1-343"></a>  await httpClient.GetStringAsync();</span>
<span id="cb1-344"><a href="#cb1-344"></a>}</span>
<span id="cb1-345"><a href="#cb1-345"></a></span>
<span id="cb1-346"><a href="#cb1-346"></a><span class="co">// Note: there&#39;s a bug in .NET45 where console apps with Console.WriteLine encounter</span></span>
<span id="cb1-347"><a href="#cb1-347"></a><span class="co">// a framework bug with deadlock. </span></span>
<span id="cb1-348"><a href="#cb1-348"></a></span></code></pre></div>
</section>
</section>
</div>

<div class="row">
        <span class="date  text-right">
            <i class="fa fa-calenda"></i> Posted on January 31, 2021
        </span>
        <span class="tags text-right" style="width: 100%">
            <ul class="list-inline"><li><i class="fa fa-tags"></i></li><li><a href="/tags/async.html">async</a></li></ul>
        </span>
</div>
]]></description>
    <pubDate>Sun, 31 Jan 2021 00:00:00 UT</pubDate>
    <guid>http://imast.am/mitq/programming/async-resources.html</guid>
    <dc:creator>Arthur Vardanyan</dc:creator>
</item>
<item>
    <title>Ալգորիթմների անալիզ</title>
    <link>http://imast.am/mitq/programming/algorithm-analysis.html</link>
    <description><![CDATA[<div class="post-content">
<div id="TOC"><ul>
<li><a href="#ալգորիթմ-և-ծրագիր">Ալգորիթմ և Ծրագիր</a></li>
<li><a href="#ալգորիթմների-վերլուփության-չախանիշներըcriteria">Ալգորիթմների վերլուփության չախանիշները(criteria)</a></li>
<li><a href="#ալգորիթմներ-գերլուծելու-եղանակները">Ալգորիթմներ Գերլուծելու եղանակները</a></li>
<li><a href="#ժամանակային-բարդություն">Ժամանակային բարդություն</a></li>
</ul></div>
<section id="ալգորիթմ-և-ծրագիր" class="level1">
<h1>Ալգորիթմ և Ծրագիր</h1>
<p><strong>Ալգորիթմը</strong> դա հաշվողական խնդրի լուծման քայլերի նկարագրությունն է: <strong>Ծրագրի</strong> համար էլ կարող ենք նույնը ասել, ավելի լավ հասկանլու համար ինչ է ալգորիթմը՝ համեմատենք այն ծարգրի հետ</p>
<div class="sourceCode" id="cb1" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1"></a></span>
<span id="cb1-2"><a href="#cb1-2"></a>|    | Ալգորիթմ(Algorithm)                    | Ծրագիր(Program)                 |</span>
<span id="cb1-3"><a href="#cb1-3"></a>|----+----------------------------------------+---------------------------------|</span>
<span id="cb1-4"><a href="#cb1-4"></a>| <span class="fl">1.</span> | Դիզայն՝ Թղթի վրա լուծում               | Իրականացում՝ ծրագրի մշակում,    |</span>
<span id="cb1-5"><a href="#cb1-5"></a>|    | - Ինչպե՞ս պետք է աշխատի ծրագիրը        | կազմում                         |</span>
<span id="cb1-6"><a href="#cb1-6"></a>|    | - Ի՞նչ պետք է անում                    |                                 |</span>
<span id="cb1-7"><a href="#cb1-7"></a>|----+----------------------------------------+---------------------------------|</span>
<span id="cb1-8"><a href="#cb1-8"></a>| <span class="fl">2.</span> | Domain knowledge - ալգորիթմ կազմողը    | Ծրագրավորող՝ մարդ որը գրում է   |</span>
<span id="cb1-9"><a href="#cb1-9"></a>|    | պետք է տիրապետի լուծվող խնդրի          | ծրագիրը                         |</span>
<span id="cb1-10"><a href="#cb1-10"></a>|    | առարկայական որիտին                     |                                 |</span>
<span id="cb1-11"><a href="#cb1-11"></a>|----+----------------------------------------+---------------------------------|</span>
<span id="cb1-12"><a href="#cb1-12"></a>| <span class="fl">3.</span> | Ցանկացած լեզու, մոտեցում հարմար է      | Միայն ծարագրավորման լեզու կարող |</span>
<span id="cb1-13"><a href="#cb1-13"></a>|    | ալգորիթմ նկարագրելու համար             | է օգտագործվել ծրագրի համար      |</span>
<span id="cb1-14"><a href="#cb1-14"></a>|----+----------------------------------------+---------------------------------|</span>
<span id="cb1-15"><a href="#cb1-15"></a>| <span class="fl">4.</span> | Ալգորիթմի նկարագրություն անկախ է       | կազված է երկաթից և Օպերացիոն    |</span>
<span id="cb1-16"><a href="#cb1-16"></a>|    | երկաթից(Hardware), Ծրագրերից(Software) | համակրգերից                     |</span>
<span id="cb1-17"><a href="#cb1-17"></a>|    | Օպերացիոն համակարգերից(OS)             |                                 |</span>
<span id="cb1-18"><a href="#cb1-18"></a>|----+----------------------------------------+---------------------------------|</span>
<span id="cb1-19"><a href="#cb1-19"></a>| <span class="fl">5.</span> | Վերլուծություն(Analyze)՝ ալգորիթմի     | Տեսատավորում(Testing)՝ ծրագրի   |</span>
<span id="cb1-20"><a href="#cb1-20"></a>|    | արդյունավետությունը ըստ ծախսած         | աշխատանքի ստուգում              |</span>
<span id="cb1-21"><a href="#cb1-21"></a>|    | ժամանակի(time) և օգտագործած            |                                 |</span>
<span id="cb1-22"><a href="#cb1-22"></a>|    | հիշողության(space)                     |                                 |</span>
<span id="cb1-23"><a href="#cb1-23"></a>|----+----------------------------------------+---------------------------------|</span>
<span id="cb1-24"><a href="#cb1-24"></a></span></code></pre></div>
<p><strong>Նախնական վերլուծություն և Հետին թվով Տեստավորում</strong></p>
<p>Նախնական վերլուծության ընթարկում է ալգորիթը իսկ ծրագիրը՝ տեստավորվում է: Նախնական վերլուծության արդյունքը ժամանակի(time) ֆունկցիան է և օգտագործված հիշողության(space) ֆունկցիան:</p>
<div class="sourceCode" id="cb2" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1"></a></span>
<span id="cb2-2"><a href="#cb2-2"></a>|    | Նախնական վերլուծություն(Priori Analysis) | Հետին թվով Տեստավորում(Posteriori Testing) |</span>
<span id="cb2-3"><a href="#cb2-3"></a>|----+------------------------------------------+--------------------------------------------|</span>
<span id="cb2-4"><a href="#cb2-4"></a>| <span class="fl">1.</span> | Ալգորիթմ                                 | Ծրագիրը                                    |</span>
<span id="cb2-5"><a href="#cb2-5"></a>|----+------------------------------------------+--------------------------------------------|</span>
<span id="cb2-6"><a href="#cb2-6"></a>| <span class="fl">2.</span> | Անկախ լեզվից                             | Կախված լեզվից                              |</span>
<span id="cb2-7"><a href="#cb2-7"></a>|----+------------------------------------------+--------------------------------------------|</span>
<span id="cb2-8"><a href="#cb2-8"></a>| <span class="fl">3.</span> | Անկախ երկաթից                            | Կախված երկաթից                             |</span>
<span id="cb2-9"><a href="#cb2-9"></a>|----+------------------------------------------+--------------------------------------------|</span>
<span id="cb2-10"><a href="#cb2-10"></a>| <span class="fl">4.</span> | ժամանակի(time) և օգտագործած              | Watch time and bytes of memory             |</span>
<span id="cb2-11"><a href="#cb2-11"></a>|    | հիշողության(space)                       |                                            |</span>
<span id="cb2-12"><a href="#cb2-12"></a>|----+------------------------------------------+--------------------------------------------|</span>
<span id="cb2-13"><a href="#cb2-13"></a></span></code></pre></div>
<p><strong>Ալգորիթմի հատկությունները</strong></p>
<div class="sourceCode" id="cb3" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1"></a>- Մուտք(Input)՝  կարող է ենդունել <span class="dv">0</span> կամ ավել մուտքային տվյալներ</span>
<span id="cb3-2"><a href="#cb3-2"></a>- Ելք(Output)՝ պետք է արտածի առնվազմ մեկ արդյունք</span>
<span id="cb3-3"><a href="#cb3-3"></a>- Ընդհատություն(Finiteness)՝ պետք է ունենա վերջավոր թվով հրամաններ, պետք է կանգ առնի</span>
<span id="cb3-4"><a href="#cb3-4"></a>- Արագություն</span>
<span id="cb3-5"><a href="#cb3-5"></a>- Ըմբռնելիություն(Definiteness)՝ կամայական հրաման ունենա հստակ և միայն մեկ նշանակություն, բոլոր քայլերը հայտնի լինեն </span>
<span id="cb3-6"><a href="#cb3-6"></a>- Արդյոանավետություն(Effectiveness)՝ չանի ոչ անհրաժեշտ բաներ, ոչ պետքական բաներ </span>
<span id="cb3-7"><a href="#cb3-7"></a>- Համընդանրություն</span></code></pre></div>
<p><strong>Ինչպես գրել ալգորիթմ</strong> Ալգորիլմ գերլու համար կարող է օգտագորղվել ցանկացած գրելաձև, դրա համար չկա ընդունված կոնկրետ ճիշտ գրելաձև Օրինակ՝</p>
<div class="sourceCode" id="cb4" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1"></a>Algorithm Swap(a,b)</span>
<span id="cb4-2"><a href="#cb4-2"></a>Begin</span>
<span id="cb4-3"><a href="#cb4-3"></a>  temp &lt;- a; --- <span class="dv">1</span> unit of time</span>
<span id="cb4-4"><a href="#cb4-4"></a>  a &lt;- b;    --- <span class="dv">1</span> unit of time</span>
<span id="cb4-5"><a href="#cb4-5"></a>  b &lt;- temp; --- <span class="dv">1</span> uniot of time</span>
<span id="cb4-6"><a href="#cb4-6"></a>End.           ----</span>
<span id="cb4-7"><a href="#cb4-7"></a>               f(n) = <span class="dv">3</span></span></code></pre></div>
</section>
<section id="ալգորիթմների-վերլուփության-չախանիշներըcriteria" class="level1">
<h1>Ալգորիթմների վերլուփության չախանիշները(criteria)</h1>
<ul>
<li><strong>Ժամանակ(Time)</strong></li>
</ul>
<p>Երբ ալգորիթմ կամ ինչ որ պրոցէդուրա ենք մշակում պետք է այնպես անենք որ այն լինի ինչքան հնարավոր է արագ, այլ կերպ ասած էֆեկտիվ ժամանակի մեջ(time efficient): Ալգորիթմը գրելուց հետո պետք է վերլուծել հասկանալու համար ինչքան ժամանակ կծախսի տված `n` ծավալի մուտքային տվյալների համար, այն ժամանակային չախը որ կստանանք վերլուծության արդյունքում կլինի ֆոնւկցիայի տեսքով, մենք կստանանք ժամանակային ֆունկցիան:</p>
<ul>
<li><strong>Ծավալ(Space)</strong></li>
</ul>
<p>Քանի որ ալգորիթմ աղխատացնելու համար այն պետք է վերածենք ծրագրի, որը նոր կարողանականք աշխատացնել մեքենայի վրա, հետևաբար կարևոր է հասկանալ գնահատել նաև թէ մեր ալգորիթմը ինչքան հիղողության ղավալը է օգտագործում:</p>
<p><strong>Ժամանակ</strong> և <strong>Ծավալ</strong> երկու կարևոր չափորոշիչներն ըստ որոնց վերլուծությունը ամենակարևորն է և առաջնահերթ արվում է, որից հետո եթե կարիք կա ապա վերլուծում ենք ըստ այլ գործոնների, օրինակ՝</p>
<ul>
<li>Տվյալների փոխանցման ծավալՑանցի(Network COnsumption/Data transfer)</li>
<li>Էներգիայի ծախսը սարքի վրա աշխատացնելիս (Power consumption on device)</li>
<li>Պրոցեսորի ռեգիստրերի քանակը (how many CPU Registers uses)</li>
</ul>
</section>
<section id="ալգորիթմներ-գերլուծելու-եղանակները" class="level1">
<h1>Ալգորիթմներ Գերլուծելու եղանակները</h1>
<p><strong>Ի՞նչպես Վերլուծել Ալգորիթմը</strong></p>
<p>Փորձենք վերլուծել վերևում նկարագրված <strong>Swap</strong> ալգորիթմը՝</p>
<ul>
<li>Ի՞նչքան ժամանակ է ծախսում, բայց ի՞նչպես հաշվենք: Յուրաքանչյուր պարզ հրաման ալգորիթմում</li>
</ul>
<p>տևում է միավոր ժամանակ, պարզ նշանակում է որ այն չունի ներդրված(nested) այլ հրամաններ, օրինակ մեկ այլ ալգորիթմի կանպչ և այլն: <strong>Swap</strong> ալգորիթմի ժամանակային ֆունկցիան f(n) = 3, հաստատուն(կոնստանտ) ֆունկցիա է:</p>
<ul>
<li>Ի՞նչքան հիշողության ծավալ է օգտագործում՝(Space analysis)</li>
</ul>
<p>Պարզենք քանի հատ փոփոխական է օգտագործում</p>
<div class="sourceCode" id="cb5" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1"></a>temp - <span class="dv">1</span>    </span>
<span id="cb5-2"><a href="#cb5-2"></a>a    - <span class="dv">1</span></span>
<span id="cb5-3"><a href="#cb5-3"></a>b    - <span class="dv">1</span></span>
<span id="cb5-4"><a href="#cb5-4"></a>   --------</span>
<span id="cb5-5"><a href="#cb5-5"></a>    <span class="dv">3</span> words, S(n) = <span class="dv">3</span>, սա նույնպես հաստատուն ֆունկցիա է</span></code></pre></div>
<p><strong>Հաճախությունները հաշվելու եղանակ(Frequency count method)</strong></p>
<p>Եղանակը կայանում է նրանում որ՝</p>
<ul>
<li>յուրաքանթյուր հրամանին համապտասխանացնում ենք ժամանակի միավոր</li>
<li>եթե հրամանը կրկնվում է ինչ որ քանակով, այլ կերպ ասած հրամանը ունի հաճախություն, ապա հրամանի կատարման հաճախությունը նույնպես հաշվում ենք</li>
</ul>
<p>for ցիկլերում մեշ կհետաքրքրի միայն համեմատությունների ժամանակը, դրա համար for ցիկլին կատարմանը կվերագրենք (n+1) ժամանակային միավոր, իսկ ցեկլի մարմինը կկատարվի n անգամ: Դիտարկենք օրինակներ՝</p>
<p>ա) Զանգվածի տարրերի գումարի ալգորիթմի վերլուծությունը</p>
<div class="sourceCode" id="cb6" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1"></a></span>
<span id="cb6-2"><a href="#cb6-2"></a>|            |                        | Time                     | Space        |</span>
<span id="cb6-3"><a href="#cb6-3"></a>|------------+------------------------+--------------------------+--------------+</span>
<span id="cb6-4"><a href="#cb6-4"></a>|            | A = [<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">3</span>,<span class="dv">2</span>,<span class="dv">1</span>]        |                          | A - n words  |</span>
<span id="cb6-5"><a href="#cb6-5"></a>|            | n = <span class="dv">5</span>                  |                          | n - <span class="dv">1</span> word   |</span>
<span id="cb6-6"><a href="#cb6-6"></a>|            | Algorithm  Sum(A,n)    |                          |              |</span>
<span id="cb6-7"><a href="#cb6-7"></a>|            | {                      |                          |              |</span>
<span id="cb6-8"><a href="#cb6-8"></a>|         <span class="fl">1.</span> | S = <span class="dv">0</span>;                 | <span class="dv">1</span> - unit of time         | S - <span class="dv">1</span> word   |</span>
<span id="cb6-9"><a href="#cb6-9"></a>|         <span class="fl">2.</span> | <span class="cf">for</span>(i = <span class="dv">0</span>; i &lt; n; i++) | n + <span class="dv">1</span> - only comparision | i - <span class="dv">1</span> word   |</span>
<span id="cb6-10"><a href="#cb6-10"></a>|            | {                      | i values  {<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>}  |              |</span>
<span id="cb6-11"><a href="#cb6-11"></a>|         <span class="fl">3.</span> | S = S + A[i];          | n - unit of time         |              |</span>
<span id="cb6-12"><a href="#cb6-12"></a>|            | }                      |                          |              |</span>
<span id="cb6-13"><a href="#cb6-13"></a>|         <span class="fl">4.</span> | <span class="cf">return</span> S;              | <span class="dv">1</span> - unit of time         |              |</span>
<span id="cb6-14"><a href="#cb6-14"></a>|            | }                      |                          |              |</span>
<span id="cb6-15"><a href="#cb6-15"></a>|            |                        |                          |              |</span>
<span id="cb6-16"><a href="#cb6-16"></a>|------------+------------------------+--------------------------+--------------+</span>
<span id="cb6-17"><a href="#cb6-17"></a>|  functions |                        | f(n) = <span class="dv">2</span><span class="er">n</span>+<span class="dv">3</span>              | S(n) = n + <span class="dv">3</span> |</span>
<span id="cb6-18"><a href="#cb6-18"></a>| complexity |                        | Time: O(n)               | Space: O(n)  |</span>
<span id="cb6-19"><a href="#cb6-19"></a></span></code></pre></div>
<p>բ) Երկու nxn մատրիցաների գումարի ալգորիթմի վերլուծենք հաճախությունների հաշվման եղանակով</p>
<div class="sourceCode" id="cb7" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1"></a></span>
<span id="cb7-2"><a href="#cb7-2"></a>|            |                           | Time                      | Space           |</span>
<span id="cb7-3"><a href="#cb7-3"></a>|------------+---------------------------+---------------------------+-----------------+</span>
<span id="cb7-4"><a href="#cb7-4"></a>|            | A = [nxn] matrix          |                           | A - n^<span class="dv">2</span> words   |</span>
<span id="cb7-5"><a href="#cb7-5"></a>|            | B = [nxn] matrix          |                           | B - n^<span class="dv">2</span> words   |</span>
<span id="cb7-6"><a href="#cb7-6"></a>|            | C = [nxn] matrix          |                           | C - n^<span class="dv">2</span> words   |</span>
<span id="cb7-7"><a href="#cb7-7"></a>|            | n                         |                           | n - <span class="dv">1</span> word      |</span>
<span id="cb7-8"><a href="#cb7-8"></a>|            | Algorithm  Add(A,B,n)     |                           |                 |</span>
<span id="cb7-9"><a href="#cb7-9"></a>|            | {                         |                           |                 |</span>
<span id="cb7-10"><a href="#cb7-10"></a>|            | <span class="cf">for</span>(i = <span class="dv">0</span>; i &lt; n; i++)    | n + <span class="dv">1</span> - nly comparisions  | i - <span class="dv">1</span> word      |</span>
<span id="cb7-11"><a href="#cb7-11"></a>|            | {                         |                           |                 |</span>
<span id="cb7-12"><a href="#cb7-12"></a>|            | <span class="cf">for</span>(j = <span class="dv">0</span>; j &lt; n; j++)    | n * (n + <span class="dv">1</span>) - body * comp | j - <span class="dv">1</span> word      |</span>
<span id="cb7-13"><a href="#cb7-13"></a>|            | {                         |                           |                 |</span>
<span id="cb7-14"><a href="#cb7-14"></a>|            | C[i,j] = A[i,j] + B[i,j]; | n * n - unit of time      |                 |</span>
<span id="cb7-15"><a href="#cb7-15"></a>|            | }                         |                           |                 |</span>
<span id="cb7-16"><a href="#cb7-16"></a>|            | }                         |                           |                 |</span>
<span id="cb7-17"><a href="#cb7-17"></a>|            | }                         |                           |                 |</span>
<span id="cb7-18"><a href="#cb7-18"></a>|------------+---------------------------+---------------------------+-----------------+</span>
<span id="cb7-19"><a href="#cb7-19"></a>| functions  |                           | f(n) = <span class="dv">2</span><span class="er">n</span>^<span class="dv">2</span> + <span class="dv">2</span><span class="er">n</span> + <span class="dv">1</span>      | S(n) = <span class="dv">3</span><span class="er">n</span>^<span class="dv">2</span> + <span class="dv">3</span> |</span>
<span id="cb7-20"><a href="#cb7-20"></a>| complexity |                           | Time: O(n^<span class="dv">2</span>)              | Space: O(n^<span class="dv">2</span>)   |</span></code></pre></div>
<p>բ) Երկու nxn մատրիցաների արտադրյալի ալգորիթմի վերլուծությունը</p>
<div class="sourceCode" id="cb8" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"></code></pre></div>
<table>
<thead>
<tr class="header">
<th></th>
<th></th>
<th>Time</th>
<th>Space</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td>A = [nxn] matrix</td>
<td></td>
<td>A - n<sup>2</sup> words</td>
</tr>
<tr class="even">
<td></td>
<td>B = [nxn] matrix</td>
<td></td>
<td>B - n<sup>2</sup> words</td>
</tr>
<tr class="odd">
<td></td>
<td>C = [nxn] matrix</td>
<td></td>
<td>C - n<sup>2</sup> words</td>
</tr>
<tr class="even">
<td></td>
<td>n</td>
<td></td>
<td>n - 1 word</td>
</tr>
<tr class="odd">
<td></td>
<td>Algorithm Multiply(A,B,n)</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>{</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>for(i = 0; i &lt; n; i++)</td>
<td>n + 1 - only comparisions of i&lt;n</td>
<td>i - 1 word</td>
</tr>
<tr class="even">
<td></td>
<td>{</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>for(j = 0; j &lt; n; j++)</td>
<td>n * (n + 1) - body * comp</td>
<td>j - 1 word</td>
</tr>
<tr class="even">
<td></td>
<td>{</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>C[i,j] = 0;</td>
<td>n * n - unit of time</td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>for(k = 0; k &lt; n; k++)</td>
<td>n * n * (n + 1) - body * comp</td>
<td>k - 1 word</td>
</tr>
<tr class="odd">
<td></td>
<td>{</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>C[i,j] = C[i,j] + A[i,k] * B[i,j];</td>
<td>n * n * n - unit of time</td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>}</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>}</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td></td>
<td>}</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td></td>
<td>} // end algorithm</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>functions</td>
<td></td>
<td>f(n) = 2n<sup>3</sup> + 3n<sup>2</sup> + 2n + 1</td>
<td>S(n) = 3n<sup>2</sup> + 4</td>
</tr>
<tr class="even">
<td>complexity</td>
<td></td>
<td>Time: O(n<sup>3</sup>)</td>
<td>Space: O(n<sup>2</sup>)</td>
</tr>
</tbody>
</table>
</section>
<section id="ժամանակային-բարդություն" class="level1">
<h1>Ժամանակային բարդություն</h1>
<p>Մանրամասն օրինակներ ժամանակային վերլուծության տարբեր դեպքերի համար</p>
<ol>
<li>Միայնակ ցիկլ</li>
</ol>
<p>Ցիկլերի համար կարոծ ենք անտեսել (n + 1) համեմատությունները որոնք ծախսվում են հենց ցիկլ կազմակերպելու համար, այն պարզ պատճառով որ այն չի փոխում ժռամանակային ֆունկցիայի աստիճանը:</p>
<div class="sourceCode" id="cb9" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1"></a> <span class="cf">for</span>(i = <span class="dv">0</span>; i &lt; n; i++) -- n + <span class="dv">1</span>, այսուհետ հաշվի չենք առնի այս գործակիցը  </span>
<span id="cb9-2"><a href="#cb9-2"></a> {</span>
<span id="cb9-3"><a href="#cb9-3"></a>   statement;          -- n  =&gt; O(n)</span>
<span id="cb9-4"><a href="#cb9-4"></a> }</span>
<span id="cb9-5"><a href="#cb9-5"></a></span>
<span id="cb9-6"><a href="#cb9-6"></a></span>
<span id="cb9-7"><a href="#cb9-7"></a><span class="cf">for</span>(i = n; i &gt; <span class="dv">0</span>; i--) - decrementing order n -&gt; <span class="dv">1</span></span>
<span id="cb9-8"><a href="#cb9-8"></a> {</span>
<span id="cb9-9"><a href="#cb9-9"></a>   statement;          -- n  =&gt; O(n)</span>
<span id="cb9-10"><a href="#cb9-10"></a> }</span>
<span id="cb9-11"><a href="#cb9-11"></a></span>
<span id="cb9-12"><a href="#cb9-12"></a></span>
<span id="cb9-13"><a href="#cb9-13"></a><span class="cf">for</span>(i = <span class="dv">1</span>; i &lt; n; i = i + <span class="dv">2</span>) ավելի ընդհանուր դեպքը`` i = i + k</span>
<span id="cb9-14"><a href="#cb9-14"></a> {                i = i + k   </span>
<span id="cb9-15"><a href="#cb9-15"></a>   statement;          -- n/<span class="dv">2</span> =&gt; f(n) = n/<span class="dv">2</span> =&gt; O(n)</span>
<span id="cb9-16"><a href="#cb9-16"></a>                       -- n/k =&gt; f(n) = n/k =&gt; O(n)  </span>
<span id="cb9-17"><a href="#cb9-17"></a> }</span>
<span id="cb9-18"><a href="#cb9-18"></a></span>
<span id="cb9-19"><a href="#cb9-19"></a></span></code></pre></div>
<ol>
<li>Կրկնակի ցիկլեր</li>
</ol>
<div class="sourceCode" id="cb10" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1"></a>  <span class="cf">for</span>(i = <span class="dv">0</span>; i &lt; n; i++)   -- n + <span class="dv">1</span></span>
<span id="cb10-2"><a href="#cb10-2"></a>  {</span>
<span id="cb10-3"><a href="#cb10-3"></a>    <span class="cf">for</span>(j = <span class="dv">0</span>; j &lt; n; j++) -- n * (n+<span class="dv">1</span>)</span>
<span id="cb10-4"><a href="#cb10-4"></a>      {</span>
<span id="cb10-5"><a href="#cb10-5"></a>        statement;         -- n * n</span>
<span id="cb10-6"><a href="#cb10-6"></a>      }                   f(n) = <span class="dv">2</span><span class="er">n</span>^<span class="dv">2</span> + <span class="dv">2</span><span class="er">n</span>+<span class="dv">2</span> =&gt; O(n^<span class="dv">2</span>)</span>
<span id="cb10-7"><a href="#cb10-7"></a>  }</span>
<span id="cb10-8"><a href="#cb10-8"></a></span>
<span id="cb10-9"><a href="#cb10-9"></a></span>
<span id="cb10-10"><a href="#cb10-10"></a>  <span class="cf">for</span>(i = <span class="dv">0</span>; i &lt; n; i++)                          </span>
<span id="cb10-11"><a href="#cb10-11"></a>  { </span>
<span id="cb10-12"><a href="#cb10-12"></a>    <span class="cf">for</span>(j = <span class="dv">0</span>; j &lt; i; j++) </span>
<span id="cb10-13"><a href="#cb10-13"></a>      {</span>
<span id="cb10-14"><a href="#cb10-14"></a>        statement;         -- n * (n + <span class="dv">1</span>)/<span class="dv">2</span> see below table  </span>
<span id="cb10-15"><a href="#cb10-15"></a>      }                   f(n) = (n^<span class="dv">2</span> + n)/<span class="dv">2</span> =&gt; O(n^<span class="dv">2</span>)</span>
<span id="cb10-16"><a href="#cb10-16"></a>  }</span>
<span id="cb10-17"><a href="#cb10-17"></a></span>
<span id="cb10-18"><a href="#cb10-18"></a></span>
<span id="cb10-19"><a href="#cb10-19"></a>|   i |   j | count |</span>
<span id="cb10-20"><a href="#cb10-20"></a>|-----+-----+-------|</span>
<span id="cb10-21"><a href="#cb10-21"></a>|   <span class="dv">0</span> |  <span class="er">0x</span> |     <span class="dv">0</span> |</span>
<span id="cb10-22"><a href="#cb10-22"></a>|   <span class="dv">1</span> |   <span class="dv">0</span> |     <span class="dv">1</span> |</span>
<span id="cb10-23"><a href="#cb10-23"></a>|     |  <span class="dv">1</span><span class="er">x</span> |       |</span>
<span id="cb10-24"><a href="#cb10-24"></a>|   <span class="dv">2</span> |   <span class="dv">0</span> |     <span class="dv">2</span> |</span>
<span id="cb10-25"><a href="#cb10-25"></a>|     |   <span class="dv">1</span> |       |</span>
<span id="cb10-26"><a href="#cb10-26"></a>|     |  <span class="dv">2</span><span class="er">x</span> |       |</span>
<span id="cb10-27"><a href="#cb10-27"></a>|   <span class="dv">3</span> |   <span class="dv">0</span> |     <span class="dv">3</span> |</span>
<span id="cb10-28"><a href="#cb10-28"></a>|     |   <span class="dv">1</span> |       |</span>
<span id="cb10-29"><a href="#cb10-29"></a>|     |   <span class="dv">2</span> |       |</span>
<span id="cb10-30"><a href="#cb10-30"></a>|     |  <span class="dv">3</span><span class="er">x</span> |       |</span>
<span id="cb10-31"><a href="#cb10-31"></a>| ... | ... |   ... |</span>
<span id="cb10-32"><a href="#cb10-32"></a>|   n |   <span class="dv">0</span> |     n |</span>
<span id="cb10-33"><a href="#cb10-33"></a>|     |   <span class="dv">1</span> |       |</span>
<span id="cb10-34"><a href="#cb10-34"></a>|     | ... |       |</span>
<span id="cb10-35"><a href="#cb10-35"></a>|     |  nx |       |</span>
<span id="cb10-36"><a href="#cb10-36"></a></span></code></pre></div>
<ol>
<li>Ցիկլի պայմանի փոփոխություն մարմնում</li>
</ol>
<div class="sourceCode" id="cb11" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb11-1"><a href="#cb11-1"></a>  <span class="cf">for</span>(i = <span class="dv">1</span>; p &lt;= n; i++)       i  p </span>
<span id="cb11-2"><a href="#cb11-2"></a>  {                             <span class="dv">1</span>  <span class="dv">0</span> + <span class="dv">1</span> = <span class="dv">1</span></span>
<span id="cb11-3"><a href="#cb11-3"></a>    p = p + i;                  <span class="dv">2</span>  <span class="dv">1</span> + <span class="dv">2</span> = <span class="dv">3</span></span>
<span id="cb11-4"><a href="#cb11-4"></a>  }                             <span class="dv">3</span>  <span class="dv">1</span> + <span class="dv">2</span> + <span class="dv">3</span> = <span class="dv">6</span></span>
<span id="cb11-5"><a href="#cb11-5"></a>                                ....</span>
<span id="cb11-6"><a href="#cb11-6"></a>                                k  <span class="dv">1</span>+<span class="dv">2</span>+<span class="dv">3</span>+...+k = k*(k+<span class="dv">1</span>)/<span class="dv">2</span>  </span>
<span id="cb11-7"><a href="#cb11-7"></a></span>
<span id="cb11-8"><a href="#cb11-8"></a>ցիկլը կանգ է առնում երբ p&gt;n, Ենթադրենք k քայլում =&gt; p = k*(k+<span class="dv">1</span>)/<span class="dv">2</span>  </span>
<span id="cb11-9"><a href="#cb11-9"></a>k*(k+<span class="dv">1</span>)/<span class="dv">2</span> &gt; n ~ k^<span class="dv">2</span> &gt; n =&gt; k &gt; √n</span></code></pre></div>
<ol>
<li></li>
</ol>
<div class="sourceCode" id="cb12"><pre class="sourceCode latex"><code class="sourceCode latex"><span id="cb12-1"><a href="#cb12-1"></a></span>
<span id="cb12-2"><a href="#cb12-2"></a>  for(i = 1; i &lt;= n; i=i*2)     i   </span>
<span id="cb12-3"><a href="#cb12-3"></a>  {                             1x2 = 2  </span>
<span id="cb12-4"><a href="#cb12-4"></a>    statment; -- logn           2x2 = 4 = 2^2   </span>
<span id="cb12-5"><a href="#cb12-5"></a>  }                             4x2 = 8 = 2^3 </span>
<span id="cb12-6"><a href="#cb12-6"></a>                                ....</span>
<span id="cb12-7"><a href="#cb12-7"></a>                                2^k  </span>
<span id="cb12-8"><a href="#cb12-8"></a>ցիկլը կանգ է կաառնի երբ i&gt;=n, Ենթադրենք k քայլում i &gt;= n</span>
<span id="cb12-9"><a href="#cb12-9"></a>i = 2^k</span>
<span id="cb12-10"><a href="#cb12-10"></a>2^k &gt;= n, եթե վերցնենք 2^k = n =&gt; k = log 2 n</span>
<span id="cb12-11"><a href="#cb12-11"></a>O(log2n)</span>
<span id="cb12-12"><a href="#cb12-12"></a>Օրինակ n=8</span>
<span id="cb12-13"><a href="#cb12-13"></a>i</span>
<span id="cb12-14"><a href="#cb12-14"></a>1</span>
<span id="cb12-15"><a href="#cb12-15"></a>2</span>
<span id="cb12-16"><a href="#cb12-16"></a>4</span>
<span id="cb12-17"><a href="#cb12-17"></a>8 - ցիկլի վերջ</span>
<span id="cb12-18"><a href="#cb12-18"></a>log8 = 3</span>
<span id="cb12-19"><a href="#cb12-19"></a></span>
<span id="cb12-20"><a href="#cb12-20"></a>Օրինակ n=10</span>
<span id="cb12-21"><a href="#cb12-21"></a>i</span>
<span id="cb12-22"><a href="#cb12-22"></a>1</span>
<span id="cb12-23"><a href="#cb12-23"></a>2</span>
<span id="cb12-24"><a href="#cb12-24"></a>4</span>
<span id="cb12-25"><a href="#cb12-25"></a>8</span>
<span id="cb12-26"><a href="#cb12-26"></a>16 - ցիկլի վերջ</span>
<span id="cb12-27"><a href="#cb12-27"></a>log10 = 3,2, բայց մենք կլորացնում ենք դեպի վերև, քանի որ ցիկլը կրկնվում է 4 անգամ: երբ կոտորակային թիվ ենք ստանում </span>
<span id="cb12-28"><a href="#cb12-28"></a>պետք է որոշենք թէ որ կոծմ ենք կլորացնում՝ վերև թէ ներքև:</span></code></pre></div>
<ol>
<li></li>
</ol>
<div class="sourceCode" id="cb13" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1"></a>  <span class="cf">for</span>(i = n; i &gt;= n; i=i/<span class="dv">2</span>)          </span>
<span id="cb13-2"><a href="#cb13-2"></a>  {                             i -&gt;  n, n/<span class="dv">2</span>, n/<span class="dv">2</span>^<span class="dv">2</span>, n/<span class="dv">2</span>^<span class="dv">3</span>, ..., n/<span class="dv">2</span>^k </span>
<span id="cb13-3"><a href="#cb13-3"></a>    statement;                    </span>
<span id="cb13-4"><a href="#cb13-4"></a>  }                               </span>
<span id="cb13-5"><a href="#cb13-5"></a></span>
<span id="cb13-6"><a href="#cb13-6"></a></span>
<span id="cb13-7"><a href="#cb13-7"></a></span>
<span id="cb13-8"><a href="#cb13-8"></a>ցիկլը կանգ  կառնի երբ i &lt; <span class="dv">1</span>, Ենթադրենք k քայլում =&gt; i&lt;<span class="dv">1</span> =&gt; n/<span class="dv">2</span>^k &lt; <span class="dv">1</span></span>
<span id="cb13-9"><a href="#cb13-9"></a>վերցնենք  n/<span class="dv">2</span>^k = <span class="dv">1</span>, k = log2 n</span>
<span id="cb13-10"><a href="#cb13-10"></a></span>
<span id="cb13-11"><a href="#cb13-11"></a>O(log2  n)</span>
<span id="cb13-12"><a href="#cb13-12"></a></span></code></pre></div>
<ol>
<li></li>
</ol>
<div class="sourceCode" id="cb14" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb14-1"><a href="#cb14-1"></a></span>
<span id="cb14-2"><a href="#cb14-2"></a>  <span class="cf">for</span>(i = <span class="dv">0</span>; i*i &lt; n; i++)       <span class="dv">1</span>   </span>
<span id="cb14-3"><a href="#cb14-3"></a>  {                             i n n/<span class="dv">2</span> n/<span class="dv">2</span>^<span class="dv">2</span> n/<span class="dv">2</span>^<span class="dv">3</span> ... n/<span class="dv">2</span>^k </span>
<span id="cb14-4"><a href="#cb14-4"></a>    statement;                    </span>
<span id="cb14-5"><a href="#cb14-5"></a>  }                               </span>
<span id="cb14-6"><a href="#cb14-6"></a></span>
<span id="cb14-7"><a href="#cb14-7"></a></span>
<span id="cb14-8"><a href="#cb14-8"></a></span>
<span id="cb14-9"><a href="#cb14-9"></a>ցիկլը կանգ  կառնի երբ i*i &gt;=n, վերցնենք  i^<span class="dv">2</span> = n =&gt; i = √n</span>
<span id="cb14-10"><a href="#cb14-10"></a></span>
<span id="cb14-11"><a href="#cb14-11"></a>O(√n)</span>
<span id="cb14-12"><a href="#cb14-12"></a></span></code></pre></div>
<ol>
<li>Երկու անկխա ցիկլեր</li>
</ol>
<div class="sourceCode" id="cb15" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb15-1"><a href="#cb15-1"></a>  <span class="cf">for</span>(i=<span class="dv">0</span>; i &lt; n; i++)</span>
<span id="cb15-2"><a href="#cb15-2"></a>  {</span>
<span id="cb15-3"><a href="#cb15-3"></a>    P++;  -- n </span>
<span id="cb15-4"><a href="#cb15-4"></a>  }</span>
<span id="cb15-5"><a href="#cb15-5"></a>  <span class="cf">for</span>(j=<span class="dv">0</span>; j &lt; n; j++)</span>
<span id="cb15-6"><a href="#cb15-6"></a>  {</span>
<span id="cb15-7"><a href="#cb15-7"></a>    statement;  -- n</span>
<span id="cb15-8"><a href="#cb15-8"></a>  }</span>
<span id="cb15-9"><a href="#cb15-9"></a>f(n) = <span class="dv">2</span><span class="er">n</span></span>
<span id="cb15-10"><a href="#cb15-10"></a>O(n)</span></code></pre></div>
<ol>
<li>Կրկնակի ցիկլ</li>
</ol>
<div class="sourceCode" id="cb16" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb16-1"><a href="#cb16-1"></a><span class="cf">for</span>(i=<span class="dv">0</span>; i &lt; n; i=i*<span class="dv">2</span>)</span>
<span id="cb16-2"><a href="#cb16-2"></a>{</span>
<span id="cb16-3"><a href="#cb16-3"></a>  P++;  -- P = log2 n </span>
<span id="cb16-4"><a href="#cb16-4"></a>}</span>
<span id="cb16-5"><a href="#cb16-5"></a><span class="cf">for</span>(j=<span class="dv">0</span>; j &lt; P; j=j*<span class="dv">2</span>)</span>
<span id="cb16-6"><a href="#cb16-6"></a>{</span>
<span id="cb16-7"><a href="#cb16-7"></a>  statement;  -- log2 P =&gt; log2 log2 n =&gt; O(log log2 n)</span>
<span id="cb16-8"><a href="#cb16-8"></a>}</span>
<span id="cb16-9"><a href="#cb16-9"></a></span></code></pre></div>
<ol>
<li>Կրկնակի ցիկլ</li>
</ol>
<div class="sourceCode" id="cb17" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"></code></pre></div>
<ol>
<li>Կրկնակի ցիկլ</li>
</ol>
<div class="sourceCode" id="cb18" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"></code></pre></div>
<ol>
<li>Կրկնակի ցիկլ</li>
</ol>
<div class="sourceCode" id="cb19" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"></code></pre></div>
<ol>
<li>Կրկնակի ցիկլ</li>
</ol>
<div class="sourceCode" id="cb20" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"></code></pre></div>
</section>
</div>

<div class="row">
        <span class="date  text-right">
            <i class="fa fa-calenda"></i> Posted on January 18, 2021
        </span>
        <span class="tags text-right" style="width: 100%">
            <ul class="list-inline"><li><i class="fa fa-tags"></i></li><li><a href="/tags/asymptotic.html">asymptotic</a></li><li><a href="/tags/algorithms.html">algorithms</a></li></ul>
        </span>
</div>
]]></description>
    <pubDate>Mon, 18 Jan 2021 00:00:00 UT</pubDate>
    <guid>http://imast.am/mitq/programming/algorithm-analysis.html</guid>
    <dc:creator>Arthur Vardanyan</dc:creator>
</item>
<item>
    <title>Դինամիկ Ծրագրավորում</title>
    <link>http://imast.am/mitq/programming/dynamic-programming.html</link>
    <description><![CDATA[<div class="post-content">
<div id="TOC"><ul>
<li><a href="#ներածություն">Ներածություն</a><ul>
<li><a href="#resources">Resources</a></li>
</ul></li>
</ul></div>
<section id="ներածություն" class="level1">
<h1>Ներածություն</h1>
<p>Ինչու՞ է անվանվում <strong>դինամիկ ծրագրավորում</strong></p>
<p><strong>Richard E. Bellman (1920–1984)</strong> պատմում է որ 1950թ. երբ աշխատել է <a href="https://en.wikipedia.org/wiki/RAND_Corporation">RAND</a> -ում, նա փնտրտուքի մեջ էր, թէ ինչե՞ս անվանի «բազմաստիճան որոշում կայացնելու գործընթացները»(multistage decision processes): Բարդություն նրանում էր, որ Բելմանի ղեկավարներից մեկը տանել չէր կարողանում հետազոտություն(research), մաթեմատիկա(mathematics) բառերը, հետևաբար պետք է ընտրել այնպիսի անուն, վերնագիր որը մի կողմից նկարագրեր հետածոտության իմաստը, բայց չհիշեցներ մաթեմատիկան, որպեսզի Բելամնը կարողանար շարունակել աշխատել իր հետազոտության վրա: Բելմանը առաջին հերթին հետաքրքրված էր արտահայտել պլանավորում, որոշում կայացնելը և մտածելը, բայց պլանավորումը հարմար չհամարելով ընտրում է <strong>«ծրագրավորում»</strong> բառը: <strong>«Դինամիկ»</strong> բառը որպեսզի նկարագրի խնդրի ժամանակի ընթացքում փոփոխվող բնութը, համ էլ տպավրոիչ բառ է: <strong>«Ծրագրավորում»</strong> բառը օպտիմալ ծրագիր գտնելու մեթոդի օգտագործումը, նույն իմաստով ինչ իմաստով որ օգտագորղվում է այնպիսի արտահայտություններում ինչպիսիք են՝ <strong>«գծային ծրագրավորում»</strong> և <strong>«մաթեմատիկական ծրագրավորում»</strong> որոնք հոմանիշներ են <strong>«մաթեմաթիկական ոպտիմիզացիա»</strong> արտահայտությանը:</p>
<p><strong>Դինամնիկ ծրագրավորումը</strong> մաթեմատիկական օպտիմիզացիայի և համակարգչային ծրագրավորման մեթոդ է, որը կիրառվում է բազմաթիվ ոլորտներում բազմապիսի խնդիրներ լուծելիս:</p>
<p><strong>Priciple of optimality</strong></p>
<section id="resources" class="level2">
<h2>Resources</h2>
<ul>
<li><a href="http://youtu.be/5dRGRueKU3M">4 Principle of Optimality - Dynamic Programming introduction</a></li>
</ul>
</section>
</section>
</div>

<div class="row">
        <span class="date  text-right">
            <i class="fa fa-calenda"></i> Posted on December  9, 2020
        </span>
        <span class="tags text-right" style="width: 100%">
            <ul class="list-inline"><li><i class="fa fa-tags"></i></li><li><a href="/tags/dynamic.html">dynamic</a></li><li><a href="/tags/algorithms.html">algorithms</a></li></ul>
        </span>
</div>
]]></description>
    <pubDate>Wed, 09 Dec 2020 00:00:00 UT</pubDate>
    <guid>http://imast.am/mitq/programming/dynamic-programming.html</guid>
    <dc:creator>Arthur Vardanyan</dc:creator>
</item>
<item>
    <title>Տեսակավորման ալգորիթմներ</title>
    <link>http://imast.am/mitq/programming/sorting-algorithms.html</link>
    <description><![CDATA[<div class="post-content">
<div id="TOC"><ul>
<li><a href="#տեսակավորման-ալգորիթմներ">Տեսակավորման ալգորիթմներ</a><ul>
<li><a href="#պղպջակային-bubble-sort">Պղպջակային (Bubble sort )</a><ul>
<li><a href="#վերլուծություն">Վերլուծություն</a></li>
<li><a href="#դիտողություններ">Դիտողություններ</a></li>
<li><a href="#կոդը">Կոդը</a></li>
</ul></li>
<li><a href="#տեղադրմանբ-insertion-sort">Տեղադրմանբ (Insertion sort)</a><ul>
<li><a href="#վերլուծություն-1">Վերլուծություն</a></li>
<li><a href="#դիտողություններ-1">Դիտողություններ</a></li>
<li><a href="#կոդը-1">Կոդը</a></li>
</ul></li>
<li><a href="#ընտրությամբ-selection-sort">Ընտրությամբ (Selection sort)</a><ul>
<li><a href="#վերլուծություն-2">Վերլուծություն</a></li>
<li><a href="#դիտողություններ-2">Դիտողություններ</a></li>
<li><a href="#կոդը-2">Կոդը</a></li>
</ul></li>
<li><a href="#արագ-quick-sort">Արագ (Quick sort)</a><ul>
<li><a href="#ներածություն">Ներածություն</a></li>
<li><a href="#բաժանման-ընթացակարգ-partitioning-procedure">Բաժանման ընթացակարգ (Partitioning procedure)</a></li>
<li><a href="#վերլուծություն-3">Վերլուծություն</a></li>
<li><a href="#դիտողություններ-3">Դիտողություններ</a></li>
<li><a href="#կոդը-3">Կոդը</a></li>
</ul></li>
</ul></li>
</ul></div>
<section id="տեսակավորման-ալգորիթմներ" class="level1">
<h1>Տեսակավորման ալգորիթմներ</h1>
<p><strong>Կայունությունը (stability)</strong> - եթե տեսակավորման ալգորիթմը պահպանում է հավասար էլեմնենտների խոխադարձ տեղակայումը, ապա այսպիտի սորտավորման ալգորիթմը կանվանենք կայուն:</p>
<p><strong>Ադապտիվություն (adaptive)</strong> - կասենք տեսակավորման ալգորիթմը ադապտիվ է եթե նախօրոք սորտավորված տվյալների վրա ծախսում է մինիմում ժամանակ՝ ցուցադրում է իր լավագույն ժամանակը(Best case):</p>
<p><strong>Տվյալների կառուցվածքը</strong> եթե հատուկ չի նշվում, ալգորթմը նկարագրելիս, նշանակում է խոսքը միաչափ զանգվածի մասին է</p>
<div class="sourceCode" id="cb1" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1"></a><span class="co">// http://www.cheat-sheets.org/saved-copy/bigoposter.pdf</span></span>
<span id="cb1-2"><a href="#cb1-2"></a></span></code></pre></div>
<table>
<thead>
<tr class="header">
<th>Տեսակավորման ալգորիթմներ</th>
<th>Stable</th>
<th>Adaptive</th>
<th>Best</th>
<th>Average</th>
<th>Worst</th>
<th>Type</th>
<th>Space</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Պղպջակային (Bubble sort)</td>
<td>Yes</td>
<td>Yes</td>
<td>Ω(n)</td>
<td>θ(n<sup>2</sup>)</td>
<td>O(n<sup>2</sup>)</td>
<td>Comparision sort</td>
<td>O(1)</td>
</tr>
<tr class="even">
<td>Տեղադրմամբ (Insertion sort)</td>
<td>Yes</td>
<td>Yes</td>
<td>Ω(n)</td>
<td>θ(n<sup>2</sup>)</td>
<td>O(n<sup>2</sup>)</td>
<td></td>
<td>O(1)</td>
</tr>
<tr class="odd">
<td>Ընտրւոթյամբ (Selection sort)</td>
<td></td>
<td>No</td>
<td>Ω(n<sup>2</sup>)</td>
<td>θ(n<sup>2</sup>)</td>
<td>O(n<sup>2</sup>)</td>
<td></td>
<td>O(1)</td>
</tr>
<tr class="even">
<td>Quicksort</td>
<td>No</td>
<td>No</td>
<td>Ω(n*log(n))</td>
<td>θ(n*log(n))</td>
<td>O(n<sup>2</sup>)</td>
<td></td>
<td>O(log(n))</td>
</tr>
<tr class="odd">
<td>Mergesort</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>O(n)</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>Count Sort</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>Index sort</td>
<td></td>
</tr>
<tr class="even">
<td>Bucket/Bin Sort</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>O(n)</td>
</tr>
<tr class="odd">
<td>Redix Sort</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>O(n+k)</td>
</tr>
<tr class="even">
<td>Shell Sort</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>O(1)</td>
</tr>
</tbody>
</table>
<section id="պղպջակային-bubble-sort" class="level2">
<h2>Պղպջակային (Bubble sort )</h2>
<p>Համեմատության եղանակով տեսակավորման ալգորիթմ է, որը կարգավորում է զանգվածը ցույգ առ ցւոյգ համեմատելով հարևան էլեմնենտերը և տեղափոխելով իրար միջև եթե սխալ են դասավորված իրար նկատմամբ: Այսպիսի մի համեմատությունների և տեղափոխությունների անցումի մեկ ցիկլը էլեմենտների վրայով կանվանենք <strong>Փաս(Pass)</strong>: Առաջին Փասի արդյունքում մեկ էլեմենտ կգտնի իր տեղը, մեծագույն էլեմենտը զանգվածում կկարգավորվի: `n` էլեմնետ ունեցող զանգվածում հարկավոր կլինի n-1 Փաս ամբողձ զանգված հերթականուլյամբ դասավորելու համար: Իսկ n էլեմենտի համար պետք է կատարել n-1 համեմատություն և մաքսիմում n-1 տեղափոխություն՝ հերթական «ծանր» էլեմենտը իր տեղ դնելու համար:</p>
<div class="sourceCode" id="cb2" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1"></a>  <span class="dt">int</span> A[] = {<span class="dv">9</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">4</span>,<span class="dv">3</span>}</span>
<span id="cb2-2"><a href="#cb2-2"></a></span>
<span id="cb2-3"><a href="#cb2-3"></a>| I Pass         | II Pass      | III Pass     | IV Pass      |</span>
<span id="cb2-4"><a href="#cb2-4"></a>|----------------+--------------+--------------+--------------|</span>
<span id="cb2-5"><a href="#cb2-5"></a>| <span class="dv">9</span>] <span class="dv">6</span>  <span class="dv">6</span>  <span class="dv">6</span>  <span class="dv">6</span>  | <span class="dv">6</span>] <span class="dv">6</span>  <span class="dv">6</span>  <span class="dv">6</span>   | <span class="dv">6</span>] <span class="dv">4</span>  <span class="dv">4</span>      | <span class="dv">4</span>] <span class="fl">3.</span>        |</span>
<span id="cb2-6"><a href="#cb2-6"></a>| <span class="dv">6</span>] <span class="dv">9</span>] <span class="dv">8</span>  <span class="dv">8</span>  <span class="dv">8</span>  | <span class="dv">8</span>] <span class="dv">8</span>] <span class="dv">4</span>  <span class="dv">4</span>   | <span class="dv">4</span>] <span class="dv">6</span>] <span class="dv">3</span>      | <span class="dv">3</span>] <span class="fl">4.</span>        |</span>
<span id="cb2-7"><a href="#cb2-7"></a>| <span class="dv">8</span>  <span class="dv">8</span>] <span class="dv">9</span>] <span class="dv">4</span>  <span class="dv">4</span>  | <span class="dv">4</span>  <span class="dv">4</span>] <span class="dv">8</span>] <span class="dv">3</span>   | <span class="dv">3</span>  <span class="dv">3</span>] <span class="fl">6.</span>     | <span class="fl">6.</span> <span class="fl">6.</span>        |</span>
<span id="cb2-8"><a href="#cb2-8"></a>| <span class="dv">4</span>  <span class="dv">4</span>  <span class="dv">4</span>] <span class="dv">9</span>] <span class="dv">3</span>  | <span class="dv">3</span>  <span class="dv">3</span>  <span class="dv">3</span>] <span class="fl">8.</span>  | <span class="fl">8.</span> <span class="fl">8.</span> <span class="fl">8.</span>     | <span class="fl">8.</span> <span class="fl">8.</span>        |</span>
<span id="cb2-9"><a href="#cb2-9"></a>| <span class="dv">3</span>  <span class="dv">3</span>  <span class="dv">3</span>  <span class="dv">3</span>] <span class="fl">9.</span> | <span class="fl">9.</span> <span class="fl">9.</span> <span class="fl">9.</span> <span class="fl">9.</span>  | <span class="fl">9.</span> <span class="fl">9.</span> <span class="fl">9.</span>     | <span class="fl">9.</span> <span class="fl">9.</span>        |</span>
<span id="cb2-10"><a href="#cb2-10"></a>|----------------+--------------+--------------+--------------|</span>
<span id="cb2-11"><a href="#cb2-11"></a>| sorted el.  <span class="dv">9</span>  | sorted el. <span class="dv">8</span> | sorted el. <span class="dv">6</span> | sorted el. <span class="dv">4</span> |</span>
<span id="cb2-12"><a href="#cb2-12"></a>| #Comp: <span class="dv">4</span>       | #Comp: <span class="dv">3</span>     | #Comp: <span class="dv">2</span>     | #Comp: <span class="dv">1</span>     |</span>
<span id="cb2-13"><a href="#cb2-13"></a>| #Swap: <span class="dv">4</span>       | #Swap: <span class="dv">2</span>     | #Swap: <span class="dv">2</span>     | #Swap: <span class="dv">1</span>     |</span>
<span id="cb2-14"><a href="#cb2-14"></a>| #max swap: <span class="dv">4</span>   | #max swap: <span class="dv">3</span> | #max swap: <span class="dv">2</span> | #max swap: <span class="dv">1</span> | </span></code></pre></div>
<section id="վերլուծություն" class="level3">
<h3>Վերլուծություն</h3>
<div class="sourceCode" id="cb3" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1"></a>Դիցուք ունենք n տարրանի զանգված, ապա.</span>
<span id="cb3-2"><a href="#cb3-2"></a>- Փասերի քանակը՝ (n-<span class="dv">1</span>)</span>
<span id="cb3-3"><a href="#cb3-3"></a>- Համեմատությունների քանակը՝ <span class="dv">1</span>+<span class="dv">2</span>+...+n-<span class="dv">1</span> = n*(n-<span class="dv">1</span>)/<span class="dv">2</span> ~ O(n^<span class="dv">2</span>)</span>
<span id="cb3-4"><a href="#cb3-4"></a>- Մաքսիմալ հնարավոր տեղափոխությունների քանակը՝ <span class="dv">1</span>+<span class="dv">2</span>+...+n-<span class="dv">1</span> = n*(n-<span class="dv">1</span>)/<span class="dv">2</span> ~ O(n^<span class="dv">2</span>)</span></code></pre></div>
<p><strong>Կայու՞ն է</strong> - այո</p>
<div class="sourceCode" id="cb4" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1"></a>|--------------------|</span>
<span id="cb4-2"><a href="#cb4-2"></a>| <span class="dv">9</span> ] <span class="dv">9</span>   <span class="dv">9</span>   <span class="dv">9</span>   <span class="dv">9</span>  | No change of order, =&gt; Bubbke sort is stable</span>
<span id="cb4-3"><a href="#cb4-3"></a>| <span class="dv">9</span>*] <span class="dv">9</span>*] <span class="dv">3</span>   <span class="dv">3</span>   <span class="dv">3</span>  |</span>
<span id="cb4-4"><a href="#cb4-4"></a>| <span class="dv">3</span>   <span class="dv">3</span> ] <span class="dv">9</span>*] <span class="dv">5</span>   <span class="dv">5</span>  |</span>
<span id="cb4-5"><a href="#cb4-5"></a>| <span class="dv">5</span>   <span class="dv">5</span>   <span class="dv">5</span> ] <span class="dv">9</span>*] <span class="dv">4</span>  |</span>
<span id="cb4-6"><a href="#cb4-6"></a>| <span class="dv">4</span>   <span class="dv">4</span>   <span class="dv">4</span>   <span class="dv">4</span> ] <span class="dv">9</span>* |</span>
<span id="cb4-7"><a href="#cb4-7"></a>|--------------------|</span></code></pre></div>
<p><strong>Ադապտի՞վ է</strong> - այո</p>
<p>Պղպջակային ալգորիթմը իր բնույթով <strong>ադապտիվ</strong> չէ, բայց այն հնարավոր է դարձնել ադապտիվ, կոդի մեջ այդ նպատակի համար օգտագործում ենք flag փոփոխականը որողելու համար հերթական փասի ընթացքում գոնե մեկ տեղափոխություն(swap) եղել է, եթե չի եղել նշանակում է տվյալնեն արդեն կարգավրոված են:</p>
<div class="sourceCode" id="cb5" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1"></a>| sorted list   |</span>
<span id="cb5-2"><a href="#cb5-2"></a>|---------------|</span>
<span id="cb5-3"><a href="#cb5-3"></a>| <span class="dv">3</span>] <span class="dv">3</span>  <span class="dv">3</span>  <span class="dv">3</span>  <span class="dv">3</span> | No swaping, mean list already sorted, we use </span>
<span id="cb5-4"><a href="#cb5-4"></a>| <span class="dv">4</span>] <span class="dv">4</span>] <span class="dv">4</span>  <span class="dv">4</span>  <span class="dv">4</span> | flag to determine <span class="cf">if</span> ther is swap and made </span>
<span id="cb5-5"><a href="#cb5-5"></a>| <span class="dv">6</span>  <span class="dv">6</span>] <span class="dv">6</span>] <span class="dv">6</span>  <span class="dv">6</span> | buuble sort algorithm adaptive, it is not </span>
<span id="cb5-6"><a href="#cb5-6"></a>| <span class="dv">8</span>  <span class="dv">8</span>  <span class="dv">8</span>] <span class="dv">8</span>] <span class="dv">8</span> | adaptive by iteself, but it is possible to </span>
<span id="cb5-7"><a href="#cb5-7"></a>| <span class="dv">9</span>  <span class="dv">9</span>  <span class="dv">9</span>  <span class="dv">9</span>] <span class="dv">9</span> | make it adaptive.</span>
<span id="cb5-8"><a href="#cb5-8"></a>|---------------|</span>
<span id="cb5-9"><a href="#cb5-9"></a>| #Comp: <span class="dv">4</span>      |</span>
<span id="cb5-10"><a href="#cb5-10"></a>| #Swap: <span class="dv">0</span>      | =&gt; O(n) - <span class="cf">if</span> already sorted, minimum time </span>
<span id="cb5-11"><a href="#cb5-11"></a>| #max swap: <span class="dv">4</span>  |</span></code></pre></div>
</section>
<section id="դիտողություններ" class="level3">
<h3>Դիտողություններ</h3>
<ul>
<li>Այս տեսակավորման միջանկյալ արդյունքները՝ k Փաս-ից հետո, k &lt; n-1, նույնպես կարող են օգտակար լինեն, քանի որ ամեն Փասի ընթացքում «ամենածանր» տարրը իջնում է ներքև, հետևաբար 1-ին փասից հետո կունենաք մեծագույն տարրը, 2-րդից հետո երկու մեծագույն տարրերը և այդպես շարունակ:</li>
</ul>
</section>
<section id="կոդը" class="level3">
<h3>Կոդը</h3>
<div class="sourceCode" id="cb6" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1"></a><span class="dt">void</span> BubbleSort(<span class="dt">int</span> A[], <span class="dt">int</span> n)</span>
<span id="cb6-2"><a href="#cb6-2"></a>{</span>
<span id="cb6-3"><a href="#cb6-3"></a> <span class="co">// no swapping means the list already sorted</span></span>
<span id="cb6-4"><a href="#cb6-4"></a> <span class="co">// we use flag to determine if there is a swap. </span></span>
<span id="cb6-5"><a href="#cb6-5"></a> <span class="dt">int</span> flag = <span class="dv">0</span>;</span>
<span id="cb6-6"><a href="#cb6-6"></a> <span class="cf">for</span>(i = <span class="dv">0</span>; i &lt; n-<span class="dv">1</span>; i++) <span class="co">// passes</span></span>
<span id="cb6-7"><a href="#cb6-7"></a> {</span>
<span id="cb6-8"><a href="#cb6-8"></a>   <span class="cf">for</span>(j = <span class="dv">0</span>, flag = <span class="dv">0</span>; i &lt; n-<span class="dv">1</span>-i; j++) <span class="co">// every pass reduced comparision count </span></span>
<span id="cb6-9"><a href="#cb6-9"></a>   {</span>
<span id="cb6-10"><a href="#cb6-10"></a>     <span class="cf">if</span>(A[j] &gt; A[j+<span class="dv">1</span>])</span>
<span id="cb6-11"><a href="#cb6-11"></a>     {</span>
<span id="cb6-12"><a href="#cb6-12"></a>       swap(A[j], A[j+<span class="dv">1</span>]);</span>
<span id="cb6-13"><a href="#cb6-13"></a>       flag = <span class="dv">1</span>;  </span>
<span id="cb6-14"><a href="#cb6-14"></a>     }</span>
<span id="cb6-15"><a href="#cb6-15"></a>   }</span>
<span id="cb6-16"><a href="#cb6-16"></a>   <span class="cf">if</span>(flag == <span class="dv">0</span>) <span class="cf">break</span>;  </span>
<span id="cb6-17"><a href="#cb6-17"></a> }</span>
<span id="cb6-18"><a href="#cb6-18"></a>}</span></code></pre></div>
</section>
</section>
<section id="տեղադրմանբ-insertion-sort" class="level2">
<h2>Տեղադրմանբ (Insertion sort)</h2>
<ul>
<li>Նախ հասկանանք ի՞նչ նկատո ունենք <strong>տեղադրում</strong> ասելով</li>
</ul>
<div class="sourceCode" id="cb7" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1"></a><span class="dt">int</span> A[] = {<span class="dv">2</span>,<span class="dv">6</span>,<span class="dv">10</span>, * ,<span class="dv">15</span>,<span class="dv">20</span>,<span class="dv">25</span>,<span class="dv">30</span>}</span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="dt">int</span> new_element = <span class="dv">12</span></span></code></pre></div>
<p>Դիգուք ունենք հերաթականությմաբ դասավորված զանգվածը որի մեջ ուոզում ենք դեծադրել նոր էլեմենտ 12 իր իր տեղում որ չխաղտի դասավորվածությունը: Դրա համար պետք է անել երկու բան</p>
<ol>
<li>գտնել 12 տեղը զանգվածում</li>
<li>և տեղափոխել այդ տեղից սկսած բոլոր տարրերը դեպի աջ, ազատելով 12 տեղը</li>
</ol>
<p>Ավելի օպտիմալ կլինի եթե շրջանցենք առաջին քայլը՝ սկսենլով ուղղակի տեծափոխել զանգվածի վերջին էլեմենտը դեպի աջ և միաժամանակ փնտրելով նոր տեծադրվոծ էլեմենտի տեղը.</p>
<div class="sourceCode" id="cb8" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb8-1"><a href="#cb8-1"></a><span class="dt">int</span> A[] = {<span class="dv">2</span>,<span class="dv">6</span>,<span class="dv">10</span>,<span class="dv">15</span>,<span class="dv">20</span>,<span class="dv">25</span>,<span class="dv">30</span>,*}</span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="dt">int</span> new_element = <span class="dv">12</span></span>
<span id="cb8-3"><a href="#cb8-3"></a></span>
<span id="cb8-4"><a href="#cb8-4"></a>- <span class="dv">30</span> &gt; <span class="dv">12</span> Yes, shift it - {<span class="dv">2</span>,<span class="dv">6</span>,<span class="dv">10</span>,<span class="dv">15</span>,<span class="dv">20</span>,<span class="dv">25</span>,*,<span class="dv">30</span>}</span>
<span id="cb8-5"><a href="#cb8-5"></a>- <span class="dv">25</span> &gt; <span class="dv">12</span> Yes, shift it - {<span class="dv">2</span>,<span class="dv">6</span>,<span class="dv">10</span>,<span class="dv">15</span>,<span class="dv">20</span>,*,<span class="dv">25</span>,<span class="dv">30</span>}</span>
<span id="cb8-6"><a href="#cb8-6"></a>- <span class="dv">20</span> &gt; <span class="dv">12</span> Yes, shift it - {<span class="dv">2</span>,<span class="dv">6</span>,<span class="dv">10</span>,<span class="dv">15</span>,*,<span class="dv">20</span>,<span class="dv">25</span>,<span class="dv">30</span>}</span>
<span id="cb8-7"><a href="#cb8-7"></a>- <span class="dv">15</span> &gt; <span class="dv">12</span> Yes, shift it - {<span class="dv">2</span>,<span class="dv">6</span>,<span class="dv">10</span>,*,<span class="dv">15</span>,<span class="dv">20</span>,<span class="dv">25</span>,<span class="dv">30</span>}</span>
<span id="cb8-8"><a href="#cb8-8"></a>- <span class="dv">10</span> &gt; <span class="dv">12</span> No,  insert   - {<span class="dv">2</span>,<span class="dv">6</span>,<span class="dv">10</span>,<span class="dv">12</span>,<span class="dv">15</span>,<span class="dv">20</span>,<span class="dv">25</span>,<span class="dv">30</span>}</span>
<span id="cb8-9"><a href="#cb8-9"></a></span>
<span id="cb8-10"><a href="#cb8-10"></a><span class="co">// in case Linked list</span></span>
<span id="cb8-11"><a href="#cb8-11"></a>Node&lt;<span class="dt">int</span>&gt; first = <span class="dv">2</span> --&gt; <span class="dv">6</span> --&gt; <span class="dv">10</span> --&gt; <span class="dv">15</span> --&gt; <span class="dv">20</span> --&gt; <span class="dv">25</span> --&gt; <span class="dv">30</span></span>
<span id="cb8-12"><a href="#cb8-12"></a>p = first;</span>
<span id="cb8-13"><a href="#cb8-13"></a>q = NULL; <span class="co">//tail pointer</span></span>
<span id="cb8-14"><a href="#cb8-14"></a>x = <span class="dv">18</span>;</span>
<span id="cb8-15"><a href="#cb8-15"></a><span class="co">// we do not need shifting in linked list, we just need to trabel and fine out the right position of new element</span></span>
<span id="cb8-16"><a href="#cb8-16"></a></span>
<span id="cb8-17"><a href="#cb8-17"></a>procedure:</span>
<span id="cb8-18"><a href="#cb8-18"></a>- p.data &lt; x, yes q = p; p = p.next;</span>
<span id="cb8-19"><a href="#cb8-19"></a>- p.data &lt; x, yes q = p; p = p.next;</span>
<span id="cb8-20"><a href="#cb8-20"></a>.......</span>
<span id="cb8-21"><a href="#cb8-21"></a>- p.data &lt; x, no, t = new Node(x);, t.next = p; q.next = t;</span>
<span id="cb8-22"><a href="#cb8-22"></a></span>
<span id="cb8-23"><a href="#cb8-23"></a>Min number of Comparisions: <span class="dv">0</span>   ~ O(<span class="dv">1</span>)</span>
<span id="cb8-24"><a href="#cb8-24"></a>Max number of Comparisions: n-<span class="dv">1</span> ~ O(n)</span>
<span id="cb8-25"><a href="#cb8-25"></a></span>
<span id="cb8-26"><a href="#cb8-26"></a>Number of Swaps:        <span class="dv">0</span> , not required    </span>
<span id="cb8-27"><a href="#cb8-27"></a></span></code></pre></div>
<p><strong>Ալգորիթմը</strong></p>
<p>Դիցուք ունենք 5 տարրանի A զանգվածը, պետք է տեսակավորենք: Ենթադրում ենք որ առաջին տարր իր տեղում է, իսկ մնացած 4 տարրերը պետք է դասավորենք <strong>տեղադրով</strong> մեկ առ մեկ՝ վերը նկարագրված եղանակով. առաջին մի տարրանի սորտավորված զանգվածի մեջ.</p>
<div class="sourceCode" id="cb9" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1"></a><span class="dt">int</span> A[] = {<span class="dv">9</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">4</span>,<span class="dv">3</span>}</span>
<span id="cb9-2"><a href="#cb9-2"></a></span>
<span id="cb9-3"><a href="#cb9-3"></a>| I Pass            | II Pass           | III Pass           | IV Pass           |</span>
<span id="cb9-4"><a href="#cb9-4"></a>|-------------------+-------------------+--------------------+-------------------|</span>
<span id="cb9-5"><a href="#cb9-5"></a>| <span class="dv">9</span> * <span class="dv">8</span> <span class="dv">4</span> <span class="dv">3</span>         | <span class="dv">6</span> <span class="dv">9</span> * <span class="dv">4</span> <span class="dv">3</span>         | <span class="dv">6</span> <span class="dv">8</span> <span class="dv">9</span> * <span class="dv">3</span>          | <span class="dv">4</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">9</span> *         |</span>
<span id="cb9-6"><a href="#cb9-6"></a>| <span class="dv">6</span>                 | . <span class="dv">8</span>               | . . <span class="dv">4</span>              | . . . <span class="dv">3</span>           |</span>
<span id="cb9-7"><a href="#cb9-7"></a>| <span class="dv">9</span> &gt; <span class="dv">6</span>, yes, shift | <span class="dv">9</span> &gt; <span class="dv">8</span>, yes, shift | <span class="dv">9</span> &gt; <span class="dv">4</span>, yes, shift  | <span class="dv">9</span> &gt; <span class="dv">4</span>, yes, shift |</span>
<span id="cb9-8"><a href="#cb9-8"></a>| <span class="dv">6</span> <span class="dv">9</span> <span class="dv">8</span> <span class="dv">4</span> <span class="dv">3</span>         | <span class="dv">6</span> * <span class="dv">9</span> <span class="dv">4</span> <span class="dv">3</span>         | <span class="dv">6</span> <span class="dv">8</span> * <span class="dv">9</span> <span class="dv">3</span>          | <span class="dv">4</span> <span class="dv">5</span> <span class="dv">8</span> * <span class="dv">9</span>         |</span>
<span id="cb9-9"><a href="#cb9-9"></a>|                   | <span class="dv">8</span>                 | . <span class="dv">4</span>                | . . <span class="dv">3</span>             |</span>
<span id="cb9-10"><a href="#cb9-10"></a>|                   | <span class="dv">6</span> &gt; <span class="dv">8</span>, no, insert | <span class="dv">8</span> &gt; <span class="dv">4</span>, yes, shift  | <span class="dv">8</span> &gt; <span class="dv">3</span>, yes, shift |</span>
<span id="cb9-11"><a href="#cb9-11"></a>|                   | <span class="dv">6</span> <span class="dv">8</span> <span class="dv">9</span> <span class="dv">4</span> <span class="dv">3</span>         | <span class="dv">6</span> * <span class="dv">8</span> <span class="dv">9</span> <span class="dv">3</span>          | <span class="dv">4</span> <span class="dv">5</span> * <span class="dv">8</span> <span class="dv">9</span>         |</span>
<span id="cb9-12"><a href="#cb9-12"></a>|                   |                   | <span class="dv">6</span> &gt; <span class="dv">4</span>, yes, shift  | . <span class="dv">3</span>               |</span>
<span id="cb9-13"><a href="#cb9-13"></a>|                   |                   | * <span class="dv">6</span> <span class="dv">8</span> <span class="dv">9</span> <span class="dv">3</span>          | <span class="dv">5</span> &gt; <span class="dv">3</span>, yes, shift |</span>
<span id="cb9-14"><a href="#cb9-14"></a>|                   |                   | <span class="dv">4</span>                  | <span class="dv">4</span> * <span class="dv">5</span> <span class="dv">8</span> <span class="dv">9</span>         |</span>
<span id="cb9-15"><a href="#cb9-15"></a>|                   |                   | no element, insert | <span class="dv">3</span>                 |</span>
<span id="cb9-16"><a href="#cb9-16"></a>|                   |                   | <span class="dv">4</span> <span class="dv">6</span> <span class="dv">8</span> <span class="dv">9</span> <span class="dv">3</span>          | <span class="dv">4</span> &gt; <span class="dv">3</span>, yes, shift |</span>
<span id="cb9-17"><a href="#cb9-17"></a>|                   |                   |                    | * <span class="dv">4</span> <span class="dv">5</span> <span class="dv">8</span> <span class="dv">9</span>         |</span>
<span id="cb9-18"><a href="#cb9-18"></a>|                   |                   |                    | <span class="dv">3</span>, insert         |</span>
<span id="cb9-19"><a href="#cb9-19"></a>|                   |                   |                    | <span class="dv">3</span> <span class="dv">4</span> <span class="dv">5</span> <span class="dv">8</span> <span class="dv">9</span>         |</span>
<span id="cb9-20"><a href="#cb9-20"></a>|-------------------+-------------------+--------------------+-------------------|</span>
<span id="cb9-21"><a href="#cb9-21"></a>| sorted el.  <span class="dv">6</span>     | sorted el. <span class="dv">8</span>      | sorted el. <span class="dv">4</span>       | sorted el. <span class="dv">3</span>      |</span>
<span id="cb9-22"><a href="#cb9-22"></a>| #Comp: <span class="dv">1</span>          | #Comp: <span class="dv">2</span>          | #Comp: <span class="dv">3</span>           | #Comp: <span class="dv">4</span>          |</span>
<span id="cb9-23"><a href="#cb9-23"></a>| #Swap: <span class="dv">1</span>          | #Swap: <span class="dv">1</span>          | #Swap: <span class="dv">3</span>           | #Swap: <span class="dv">4</span>          |</span>
<span id="cb9-24"><a href="#cb9-24"></a>| #max swap: <span class="dv">1</span>      | #max swap: <span class="dv">2</span>      | #max swap: <span class="dv">3</span>       | #max swap: <span class="dv">4</span>      |</span>
<span id="cb9-25"><a href="#cb9-25"></a></span></code></pre></div>
<section id="վերլուծություն-1" class="level3">
<h3>Վերլուծություն</h3>
<div class="sourceCode" id="cb10" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1"></a>Դիցուք ունենք n տարրանի զանգված, ապա.</span>
<span id="cb10-2"><a href="#cb10-2"></a>- Փասերի քանակը՝ (n-<span class="dv">1</span>)</span>
<span id="cb10-3"><a href="#cb10-3"></a>- Համեմատությունների քանակը՝ <span class="dv">1</span>+<span class="dv">2</span>+...+n-<span class="dv">1</span> = n*(n-<span class="dv">1</span>)/<span class="dv">2</span> ~ O(n^<span class="dv">2</span>)</span>
<span id="cb10-4"><a href="#cb10-4"></a>- Մաքսիմալ հնարավոր տեղափոխությունների քանակը՝ <span class="dv">1</span>+<span class="dv">2</span>+...+n-<span class="dv">1</span> = n*(n-<span class="dv">1</span>)/<span class="dv">2</span> ~ O(n^<span class="dv">2</span>)</span>
<span id="cb10-5"><a href="#cb10-5"></a></span>
<span id="cb10-6"><a href="#cb10-6"></a>|      | min - Best <span class="cf">case</span>    | max: Worst <span class="cf">case</span>     |</span>
<span id="cb10-7"><a href="#cb10-7"></a>|------+--------------------+---------------------|</span>
<span id="cb10-8"><a href="#cb10-8"></a>| Time | O(n)               | O(n^<span class="dv">2</span>)              |</span>
<span id="cb10-9"><a href="#cb10-9"></a>| Swap | O(<span class="dv">1</span>)               | O(n^<span class="dv">2</span>)              |</span>
<span id="cb10-10"><a href="#cb10-10"></a>|------+--------------------+---------------------|</span>
<span id="cb10-11"><a href="#cb10-11"></a>|      | in ascending order | in descending order |</span>
<span id="cb10-12"><a href="#cb10-12"></a></span></code></pre></div>
<p><strong>Կայու՞ն է</strong> - այո</p>
<p>Դիտարկենք զանգված որը տեսակավորել ենք տեադրմամբ, և ունենք կնկնվող էլեմենտ 6’ որի հերթն է տեծադրելու զանգվածի կարգավորված մասում, քանի որ մենք ստուգում ենք աջից խիստ անհավասարություն, այսինք հավասար էլեմենտնրը չի տեղափոխում, արդյունքում էլ այս երկրորդ 6’ կհայտնվի առաջին վեցից աջ, ինչպես չկարգավորված զանցվածում էր, հետԵբար տեղադրմամբ տեսակավորումը կայուն է:</p>
<div class="sourceCode" id="cb11" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb11-1"><a href="#cb11-1"></a>|----------------|</span>
<span id="cb11-2"><a href="#cb11-2"></a>| <span class="dv">4</span> <span class="dv">6</span> <span class="dv">9</span> <span class="dv">11</span> <span class="dv">12</span> *  |</span>
<span id="cb11-3"><a href="#cb11-3"></a>|          <span class="dv">6</span><span class="er">&#39;</span>    |</span>
<span id="cb11-4"><a href="#cb11-4"></a>|    . . .       |</span>
<span id="cb11-5"><a href="#cb11-5"></a>| <span class="dv">4</span> <span class="dv">6</span> <span class="dv">6</span><span class="er">&#39;</span> <span class="dv">5</span> <span class="dv">11</span> <span class="dv">12</span> |</span>
<span id="cb11-6"><a href="#cb11-6"></a>|----------------|</span></code></pre></div>
<p><strong>Ադապտի՞վ է</strong> - այո</p>
<p>Տեղադրությամբ տեսակավորումը ադապտիվ է իր բնույթով՝ կարիք չկա լրացուցիչ ինչ որ flag կամ այլ մի բան օգտագործենլու որպեսզի այն դառնա ադապտիվ:</p>
<div class="sourceCode" id="cb12" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb12-1"><a href="#cb12-1"></a><span class="dt">int</span> A[] = {<span class="dv">3</span>,<span class="dv">6</span>,<span class="dv">9</span>,<span class="dv">10</span>,<span class="dv">12</span>}</span>
<span id="cb12-2"><a href="#cb12-2"></a></span>
<span id="cb12-3"><a href="#cb12-3"></a>| I Pass            | II Pass           | III Pass           | IV Pass             |</span>
<span id="cb12-4"><a href="#cb12-4"></a>|-------------------+-------------------+--------------------+---------------------|</span>
<span id="cb12-5"><a href="#cb12-5"></a>| <span class="dv">3</span> * <span class="dv">9</span> <span class="dv">10</span> <span class="dv">12</span>       | <span class="dv">3</span> <span class="dv">6</span> * <span class="dv">10</span> <span class="dv">12</span>       | <span class="dv">3</span> <span class="dv">6</span> <span class="dv">9</span> * <span class="dv">12</span>         | <span class="dv">3</span> <span class="dv">6</span> <span class="dv">9</span> <span class="dv">10</span> *          |</span>
<span id="cb12-6"><a href="#cb12-6"></a>| <span class="dv">6</span>                 | . <span class="dv">9</span>               | . . <span class="dv">10</span>             | . . . <span class="dv">12</span>            |</span>
<span id="cb12-7"><a href="#cb12-7"></a>| <span class="dv">3</span> &gt; <span class="dv">6</span>, no, insert | <span class="dv">6</span> &gt; <span class="dv">9</span>, no, insert | <span class="dv">9</span> &gt; <span class="dv">10</span>, no, insert | <span class="dv">10</span> &gt; <span class="dv">12</span>, no, insert |</span>
<span id="cb12-8"><a href="#cb12-8"></a>|-------------------+-------------------+--------------------+---------------------|</span>
<span id="cb12-9"><a href="#cb12-9"></a>| #Comp: <span class="dv">1</span>          | #Comp: <span class="dv">1</span>          | #Comp: <span class="dv">1</span>           | #Compo: <span class="dv">1</span>           |</span>
<span id="cb12-10"><a href="#cb12-10"></a>| #Swap: <span class="dv">0</span>          | #Swap: <span class="dv">0</span>          | #Swap: <span class="dv">0</span>           | #Swap: <span class="dv">0</span>            | </span>
<span id="cb12-11"><a href="#cb12-11"></a></span>
<span id="cb12-12"><a href="#cb12-12"></a>Number of Comparisions: n - <span class="dv">1</span> ~  O(n)</span>
<span id="cb12-13"><a href="#cb12-13"></a>Number of Swaps:        <span class="dv">0</span> ~ O(<span class="dv">1</span>) </span>
<span id="cb12-14"><a href="#cb12-14"></a></span></code></pre></div>
</section>
<section id="դիտողություններ-1" class="level3">
<h3>Դիտողություններ</h3>
<ul>
<li>Տեղադրմամբ տեսակավորումը չունի օգտակար միջանկյալ արդյունք՝ k Փաս-ից հետո, k &lt; n-1</li>
<li>Այս տեսակավորումը իրականացնելիս նպատակահարմար է օգտագործել կապակցված ցուցակ, որովհետև էլեմենտների տեծափոխությյուն կատարելու անհրաժեշտությունը չկա: Հակառակն էլ է ճիշտ, կապակզված ցուցակ տեսակավրոելու համար ավելի հարմար է տեղադրմամբ տեսակավորման ալգորիթմը:</li>
</ul>
</section>
<section id="կոդը-1" class="level3">
<h3>Կոդը</h3>
<div class="sourceCode" id="cb13" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1"></a><span class="dt">void</span> InsertionSort(<span class="dt">int</span> A[], <span class="dt">int</span> n)</span>
<span id="cb13-2"><a href="#cb13-2"></a>{</span>
<span id="cb13-3"><a href="#cb13-3"></a>  <span class="dt">int</span> i, j, x;</span>
<span id="cb13-4"><a href="#cb13-4"></a>  <span class="cf">for</span>(i = <span class="dv">1</span>; i &lt; n; i++) <span class="co">//passes</span></span>
<span id="cb13-5"><a href="#cb13-5"></a>  {</span>
<span id="cb13-6"><a href="#cb13-6"></a>    j = i - <span class="dv">1</span>;</span>
<span id="cb13-7"><a href="#cb13-7"></a>    x = A[j]; <span class="co">// the element we want to sort, to insert in the sorted part of array</span></span>
<span id="cb13-8"><a href="#cb13-8"></a>    <span class="cf">while</span>(j &gt; -<span class="dv">1</span> &amp;&amp; A[j] &gt; x)</span>
<span id="cb13-9"><a href="#cb13-9"></a>    {</span>
<span id="cb13-10"><a href="#cb13-10"></a>      A[j + <span class="dv">1</span>] = A[j];</span>
<span id="cb13-11"><a href="#cb13-11"></a>      j--;  </span>
<span id="cb13-12"><a href="#cb13-12"></a>    }</span>
<span id="cb13-13"><a href="#cb13-13"></a>    A[j + <span class="dv">1</span>] = x;</span>
<span id="cb13-14"><a href="#cb13-14"></a>  }</span>
<span id="cb13-15"><a href="#cb13-15"></a>}</span></code></pre></div>
</section>
</section>
<section id="ընտրությամբ-selection-sort" class="level2">
<h2>Ընտրությամբ (Selection sort)</h2>
<p>Այս ալգորիթմը նույնպես տեսակավարում է Փասերով: Ամեն Փասում մի էլեմենտ գտնում է իր տեղը՝ տեսակավրովում է: Առաջին Փասում մենք ընտրում ենք առաջին տեղը և փնտրում ենք էլեմենտը այդ տեղի համար:</p>
<pre><code>int A[] ={9,7,4,3,6,5}
int i - pointing the position, that element will come in this place: minimum element
// will use two more pointers to find minimum
int j = k = i;

Steps for each pass
int j = k = i;
1. move j to the next element
2. from j = k to n do check if A[j] &lt; A[k] then k = j; j++; else j++;
3. swap(A[i], A[k])

After I Pass first element is sorted, now we should find an element for a second postion i = 1;

//We select a position and finding an element for that position
| I Pass          | II Pass         | III Pass         | IV Pass         | V Pass          |
|-----------------+-----------------+------------------+-----------------+-----------------|
| 9 &lt;- i,j,k      | 3             3 | 3                | 3            3  | 3            3  |
| 7               | 7 &lt;- i,j,k    4 | 4                | 4            4  | 4            4  |
| 4               | 4             7 | 7&lt;-i,j,k         | 5            5  | 5            5  |
| 3               | 9             9 | 9                | 9 &lt;- i,j,k   6  | 6            6  |
| 6               | 6             6 | 6                | 6            9  | 9 &lt;-i,j,k    7  |
| 5               | 5             5 | 5                | 7            7  | 7            9  |
|                 |                 |                  |                 |                 |
| at the end:     | at the end:     | at the end:      | at the end:     | at the end:     |
| i = 0           | i = 1           | i = 2            | i = 3           | i=4             |
| k = 3           | k = 2           | k = 5            | k = 4           | k=5             |
| j = 6           | j = 6           | j = 6            | j = 6           | j=6             |
| swap(A[i],A[k]) | swap(A[i],A[k]) | swap(A[i],A[k])  | swap(A[i],A[k]) | swap(A[i],A[k]) |
| one el. sorted  | two el. sorted  | three el. sorted | four el. sorted | all el. sorted  |
| smallest el.    | two smallest    | three smallest   | IV ....         | V .....         |
|-----------------+-----------------+------------------+-----------------+-----------------|
| #Comp: 5        | #Comp: 4        | #Comp: 3         | #Comp: 2        | #Comp: 1        |
| #Swap: 1        | #Swap: 1        | #Swap: 1         | #Swap: 1        | #Swap: 1        |

Number of Passes: n-1
Number of comparisions: 1+2+...+n-1 = n*(n-1)/2 ~ O(n^2)
Number of swap: n-1 ~ O(n)
</code></pre>
<section id="վերլուծություն-2" class="level3">
<h3>Վերլուծություն</h3>
<div class="sourceCode" id="cb15" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb15-1"><a href="#cb15-1"></a>Դիցուք ունենք n տարրանի զանգված, ապա.</span>
<span id="cb15-2"><a href="#cb15-2"></a>- Փասերի քանակը՝ (n-<span class="dv">1</span>)</span>
<span id="cb15-3"><a href="#cb15-3"></a>- Համեմատությունների քանակը՝ <span class="dv">1</span>+<span class="dv">2</span>+...+n-<span class="dv">1</span> = n*(n-<span class="dv">1</span>)/<span class="dv">2</span> ~ O(n^<span class="dv">2</span>)</span>
<span id="cb15-4"><a href="#cb15-4"></a>- տեղափոխությունների քանակը՝ n-<span class="dv">1</span> ~ O(n)</span></code></pre></div>
<p><strong>Կայուն է</strong> - ոչ</p>
<p>Հենց առաջին Փասի վերջւոմ կատարվող տեղափոխության ժամանակ առաջին 8 կանցնի մյուս 8-ից՝ իրար նկատմամբ տեղերը կփոխվի. հետևաբար կայուն չէ:</p>
<div class="sourceCode" id="cb16" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb16-1"><a href="#cb16-1"></a>|  I Pass | after swap |</span>
<span id="cb16-2"><a href="#cb16-2"></a>|---------+------------|</span>
<span id="cb16-3"><a href="#cb16-3"></a>| i -&gt; <span class="dv">8</span><span class="er">&#39;</span> |          <span class="dv">2</span> |</span>
<span id="cb16-4"><a href="#cb16-4"></a>|       <span class="dv">3</span> |          <span class="dv">3</span> |</span>
<span id="cb16-5"><a href="#cb16-5"></a>|       <span class="dv">5</span> |          <span class="dv">5</span> |</span>
<span id="cb16-6"><a href="#cb16-6"></a>|       <span class="dv">8</span> |          <span class="dv">8</span> |</span>
<span id="cb16-7"><a href="#cb16-7"></a>|       <span class="dv">4</span> |          <span class="dv">4</span> |</span>
<span id="cb16-8"><a href="#cb16-8"></a>|  k -&gt; <span class="dv">2</span> |         <span class="dv">8</span><span class="er">&#39;</span> |</span>
<span id="cb16-9"><a href="#cb16-9"></a>|       <span class="dv">7</span> |          <span class="dv">7</span> |</span></code></pre></div>
<p><strong>Ադապտիվ է</strong> - ոչ</p>
<p>Ընտրությամբ տեսակավորման մեջ հնարավոր չէ այնպես անել որ ստուգի տվյալները արդեն իսկ դասավրոված են հերթականությամբ. ինչպես դա արեցինք Պղպջակային տեսակավորման ընթացակարգում: Ընտրությամբ տեսակավորումը միշտ աշխատում է O(n<sup>2</sup>) ժամանակում:</p>
</section>
<section id="դիտողություններ-2" class="level3">
<h3>Դիտողություններ</h3>
<ul>
<li>Ընտրությամբ տեսակավորումը միակ տեսակավորման ալգորիթմն է, որը օգտագործում է մինիմում քանակի տեղափոխություն(swap):</li>
<li>K Փաս հետո կունենանք k փոքագույն տարրերը, այսինք ընտրությամբ տեսակավորումը ունի օգտակար միջանկյալ արդյունք: Bubble sort K փաս հետո ունենւոմ ենք K մեծագույննեը այստեղ, K փոգրագույնները:</li>
</ul>
</section>
<section id="կոդը-2" class="level3">
<h3>Կոդը</h3>
<div class="sourceCode" id="cb17" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb17-1"><a href="#cb17-1"></a><span class="dt">void</span> SelectionSort(<span class="dt">int</span> A[], <span class="dt">int</span> n)</span>
<span id="cb17-2"><a href="#cb17-2"></a>{</span>
<span id="cb17-3"><a href="#cb17-3"></a> <span class="cf">for</span>(i = <span class="dv">0</span>; i &lt; n-<span class="dv">1</span>; i++) <span class="co">// passes</span></span>
<span id="cb17-4"><a href="#cb17-4"></a> {</span>
<span id="cb17-5"><a href="#cb17-5"></a>   <span class="cf">for</span>(j = k = i; j &lt; n; j++) <span class="co">// every pass reduced comparision count</span></span>
<span id="cb17-6"><a href="#cb17-6"></a>   {</span>
<span id="cb17-7"><a href="#cb17-7"></a>     <span class="cf">if</span>(A[j] &gt; A[k])</span>
<span id="cb17-8"><a href="#cb17-8"></a>     {</span>
<span id="cb17-9"><a href="#cb17-9"></a>       k = j;</span>
<span id="cb17-10"><a href="#cb17-10"></a>     }</span>
<span id="cb17-11"><a href="#cb17-11"></a>   }</span>
<span id="cb17-12"><a href="#cb17-12"></a>   swap(A[i], A[k]);</span>
<span id="cb17-13"><a href="#cb17-13"></a> }</span>
<span id="cb17-14"><a href="#cb17-14"></a>}</span></code></pre></div>
</section>
</section>
<section id="արագ-quick-sort" class="level2">
<h2>Արագ (Quick sort)</h2>
<section id="ներածություն" class="level3">
<h3>Ներածություն</h3>
<div class="sourceCode" id="cb18" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb18-1"><a href="#cb18-1"></a>(<span class="dv">1</span>) - [<span class="dv">10</span><span class="er">&#39;</span> <span class="dv">3</span> <span class="dv">20</span> <span class="dv">70</span> <span class="dv">40</span> <span class="dv">90</span> <span class="dv">80</span>]</span>
<span id="cb18-2"><a href="#cb18-2"></a>(<span class="dv">2</span>) - [<span class="dv">80</span> <span class="dv">70</span> <span class="dv">40</span> <span class="dv">30</span> <span class="dv">20</span> <span class="dv">10</span> <span class="dv">90</span><span class="er">&#39;</span>]</span>
<span id="cb18-3"><a href="#cb18-3"></a>(<span class="dv">3</span>) - [<span class="dv">40</span> <span class="dv">30</span> <span class="dv">20</span> <span class="dv">50</span><span class="er">&#39;</span> <span class="dv">90</span> <span class="dv">70</span> <span class="dv">80</span>]</span></code></pre></div>
<p>(3)-ում 50 իր տեղում է, քանի որ բոլոր նախորդող տարրերը ավելի փոքր են իրենից և բոլոր հաջորդոծ տարրերը ավելի մեծ են: Արագ տեսակավորման ալգորիթմի հիմքում հենց այս գաղափարն է, որ տարրը իր տեղում է եթե բոլոր նախորդողները իրենից փոքր են, իսկ բոլոր հաջորդողները իրենից մեծ:</p>
</section>
<section id="բաժանման-ընթացակարգ-partitioning-procedure" class="level3">
<h3>Բաժանման ընթացակարգ (Partitioning procedure)</h3>
<ul>
<li>Ընտրում ենք առանցքային(pivot) տարրը</li>
<li>որոշում ենք i, j տեղերը</li>
<li>տեղափոխում ենք տարրերը</li>
<li>Բերում ենք pivot իր տեղը, որը կկոչենք՝ բաժանման տեղ կամ գիծ</li>
</ul>
<div class="sourceCode" id="cb19" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb19-1"><a href="#cb19-1"></a>Բաժանման ընթացակարգի իրականացման մանրամասերը և քայլերը.</span>
<span id="cb19-2"><a href="#cb19-2"></a></span>
<span id="cb19-3"><a href="#cb19-3"></a>- Առաջին էլեմնտը՝ <span class="dv">50</span> դիտարկում ենք որպես առանցքային(pivotal) տարր, և պետք է գտնենք այդ առանցքային տարրի</span>
<span id="cb19-4"><a href="#cb19-4"></a>տեղը, դրա համար բոոր այն տարրերը որինք առանցքային տարրից՝ <span class="dv">50</span> փոքր են պետք լինեն իրենից ձախ և բոլոր այն տարրերը </span>
<span id="cb19-5"><a href="#cb19-5"></a>որոնք մեծ են ընտրված առանցքային տարրից՝ աջ կողմում:</span>
<span id="cb19-6"><a href="#cb19-6"></a></span>
<span id="cb19-7"><a href="#cb19-7"></a>- *i* - փնտրելու ենք այն տարրերը որոնք մեծ են առանցքային(pivot) տարրից </span>
<span id="cb19-8"><a href="#cb19-8"></a>- *j* - փնտրելու ենք այն տարրերը որոնք փոքր կամ հավասար են առանցքային(pivot) տարրից </span>
<span id="cb19-9"><a href="#cb19-9"></a>- *∞* - ենթադրենք որ ցուցակում չկա ավելի մեծ տարր քան մեր ընտրած առանցքային տարրն է. այդ </span>
<span id="cb19-10"><a href="#cb19-10"></a> դեպքում որպեսզի կանգնեցնենք *i*-ն մեր տվյանլնեի զանգվածի վերջին տարրը դնենք մեծագույն արժեքը՝ </span>
<span id="cb19-11"><a href="#cb19-11"></a> օրինակ INT32_MAX (Int.MaxValue)</span>
<span id="cb19-12"><a href="#cb19-12"></a></span>
<span id="cb19-13"><a href="#cb19-13"></a></span>
<span id="cb19-14"><a href="#cb19-14"></a><span class="dt">int</span> l = <span class="dv">0</span>;</span>
<span id="cb19-15"><a href="#cb19-15"></a><span class="dt">int</span> h = <span class="dv">10</span>;</span>
<span id="cb19-16"><a href="#cb19-16"></a><span class="dt">int</span> i = <span class="dv">0</span>; <span class="dt">int</span> j = <span class="dv">9</span>;</span>
<span id="cb19-17"><a href="#cb19-17"></a><span class="dt">int</span> pivot = A[l]; <span class="co">//50</span></span>
<span id="cb19-18"><a href="#cb19-18"></a></span>
<span id="cb19-19"><a href="#cb19-19"></a>A = [<span class="dv">50</span> <span class="dv">70</span> <span class="dv">60</span> <span class="dv">90</span> <span class="dv">40</span> <span class="dv">80</span> <span class="dv">10</span> <span class="dv">20</span> <span class="dv">30</span> ∞]</span>
<span id="cb19-20"><a href="#cb19-20"></a>      i                         j</span>
<span id="cb19-21"><a href="#cb19-21"></a>---------------------------------</span>
<span id="cb19-22"><a href="#cb19-22"></a></span>
<span id="cb19-23"><a href="#cb19-23"></a>Steps:</span>
<span id="cb19-24"><a href="#cb19-24"></a>| # |                                        |                                                        |</span>
<span id="cb19-25"><a href="#cb19-25"></a>|---+----------------------------------------+--------------------------------------------------------|</span>
<span id="cb19-26"><a href="#cb19-26"></a>| <span class="dv">1</span> | i++; j--;                              | [<span class="dv">50</span> <span class="dv">70</span> <span class="dv">60</span> <span class="dv">90</span> <span class="dv">40</span> <span class="dv">80</span> <span class="dv">10</span> <span class="dv">20</span> <span class="dv">30</span> ∞]                         |</span>
<span id="cb19-27"><a href="#cb19-27"></a>|   |                                        |     i                    j                             |</span>
<span id="cb19-28"><a href="#cb19-28"></a>|   | <span class="cf">if</span>(A[i] &gt; pivot) &amp;&amp; <span class="cf">if</span>(A[j] &lt;= pivot)) | Yes, Yes                                               |</span>
<span id="cb19-29"><a href="#cb19-29"></a>|   | then swap(A[i], A[j])                  | [<span class="dv">50</span> <span class="dv">30</span> <span class="dv">60</span> <span class="dv">90</span> <span class="dv">40</span> <span class="dv">80</span> <span class="dv">10</span> <span class="dv">20</span> <span class="dv">70</span> ∞]                         |</span>
<span id="cb19-30"><a href="#cb19-30"></a>|   |                                        |                                                        |</span>
<span id="cb19-31"><a href="#cb19-31"></a>|---+----------------------------------------+--------------------------------------------------------|</span>
<span id="cb19-32"><a href="#cb19-32"></a>| <span class="dv">2</span> | i++; j--;                              | [<span class="dv">50</span> <span class="dv">30</span> <span class="dv">60</span> <span class="dv">90</span> <span class="dv">40</span> <span class="dv">80</span> <span class="dv">10</span> <span class="dv">20</span> <span class="dv">70</span> ∞]                         |</span>
<span id="cb19-33"><a href="#cb19-33"></a>|   |                                        |        i              j                                |</span>
<span id="cb19-34"><a href="#cb19-34"></a>|   | <span class="cf">if</span>(A[i] &gt; pivot) &amp;&amp; <span class="cf">if</span>(A[j] &lt;= pivot)) | Yes, Yes                                               |</span>
<span id="cb19-35"><a href="#cb19-35"></a>|   | then swap(A[i], A[j])                  | [<span class="dv">50</span> <span class="dv">30</span> <span class="dv">20</span> <span class="dv">90</span> <span class="dv">40</span> <span class="dv">80</span> <span class="dv">10</span> <span class="dv">60</span> <span class="dv">70</span> ∞]                         |</span>
<span id="cb19-36"><a href="#cb19-36"></a>|---+----------------------------------------+--------------------------------------------------------|</span>
<span id="cb19-37"><a href="#cb19-37"></a>| <span class="dv">3</span> | i++; j--;                              | [<span class="dv">50</span> <span class="dv">30</span> <span class="dv">20</span> <span class="dv">90</span> <span class="dv">40</span> <span class="dv">80</span> <span class="dv">10</span> <span class="dv">60</span> <span class="dv">70</span> ∞]                         |</span>
<span id="cb19-38"><a href="#cb19-38"></a>|   |                                        |           i        j                                   |</span>
<span id="cb19-39"><a href="#cb19-39"></a>|   | <span class="cf">if</span>(A[i] &gt; pivot) &amp;&amp; <span class="cf">if</span>(A[j] &lt;= pivot)) | Yes, Yes                                               |</span>
<span id="cb19-40"><a href="#cb19-40"></a>|   | then swap(A[i], A[j])                  | [<span class="dv">50</span> <span class="dv">30</span> <span class="dv">20</span> <span class="dv">10</span> <span class="dv">40</span> <span class="dv">80</span> <span class="dv">90</span> <span class="dv">60</span> <span class="dv">70</span> ∞]                         |</span>
<span id="cb19-41"><a href="#cb19-41"></a>|---+----------------------------------------+--------------------------------------------------------|</span>
<span id="cb19-42"><a href="#cb19-42"></a>| <span class="dv">4</span> | i++; j--;                              | [<span class="dv">50</span> <span class="dv">30</span> <span class="dv">20</span> <span class="dv">10</span> <span class="dv">40</span> <span class="dv">80</span> <span class="dv">90</span> <span class="dv">60</span> <span class="dv">70</span> ∞]                         |</span>
<span id="cb19-43"><a href="#cb19-43"></a>|   |                                        |              i   j                                     |</span>
<span id="cb19-44"><a href="#cb19-44"></a>|   | <span class="cf">if</span>(A[i] &gt; pivot) &amp;&amp; <span class="cf">if</span>(A[j] &lt;= pivot)) | No, No                                                 |</span>
<span id="cb19-45"><a href="#cb19-45"></a>|   | <span class="cf">continue</span> i++; <span class="cf">if</span> greater stop          | [<span class="dv">50</span> <span class="dv">30</span> <span class="dv">20</span> <span class="dv">10</span> <span class="dv">40</span> <span class="dv">80</span> <span class="dv">10</span> <span class="dv">20</span> <span class="dv">70</span> ∞]                         |</span>
<span id="cb19-46"><a href="#cb19-46"></a>|   | <span class="cf">continue</span> j--; <span class="cf">if</span> smaller stop          |                                                        |</span>
<span id="cb19-47"><a href="#cb19-47"></a>|---+----------------------------------------+--------------------------------------------------------|</span>
<span id="cb19-48"><a href="#cb19-48"></a>|   |                                        |                                                        |</span>
<span id="cb19-49"><a href="#cb19-49"></a>| <span class="dv">5</span> | when (i &gt; j)                           | yes, swap(pivot, A[j])                                 |</span>
<span id="cb19-50"><a href="#cb19-50"></a>|   |                                        |                                                        |</span>
<span id="cb19-51"><a href="#cb19-51"></a>|   |                                        | [(<span class="dv">30</span> <span class="dv">20</span> <span class="dv">10</span> <span class="dv">40</span>) <span class="dv">50</span> (<span class="dv">80</span> <span class="dv">10</span> <span class="dv">20</span> <span class="dv">70</span>) ∞]                     |</span>
<span id="cb19-52"><a href="#cb19-52"></a>|   |                                        |                ..                                      |</span>
<span id="cb19-53"><a href="#cb19-53"></a>|   |                                        | ths pivotal element in its place, one lement is sorted |</span>
<span id="cb19-54"><a href="#cb19-54"></a>|   |                                        | this .. position called <span class="st">&quot;Partitioning postition&quot;</span>       |</span>
<span id="cb19-55"><a href="#cb19-55"></a>|   |                                        | <span class="cf">for</span> infinity element <span class="cf">for</span> left hand side list is a      |</span>
<span id="cb19-56"><a href="#cb19-56"></a>|   |                                        | sorted element <span class="dv">50</span>                                      |</span>
<span id="cb19-57"><a href="#cb19-57"></a>|---+----------------------------------------+--------------------------------------------------------|</span></code></pre></div>
<p><strong>Բաժանման պրոցեդուրայից</strong> հետո ունենում ենք երկու բաժանված՝ աջ և ձախ զանգվածներ որոնք նույնպես պետք է սորտավորենք: Ի՞նչպես անել դա: Պատասխանն էլ հենց այն է ինչ կանվանենք <strong>արագ տեսակավորման ալգորիթմ</strong> և որը կկիրառենք <strong>ռեկուրսիվ</strong> եղանակով այդ բաժանված աջ և ձախ կեսերի վրա: Ձախ կեսի համար որես <strong>∞</strong> տարր կհանդիսանա հենց նոր սորտավորված առանցքային էլեմենտը</p>
</section>
<section id="վերլուծություն-3" class="level3">
<h3>Վերլուծություն</h3>
<p>Նախքան վերլուծությունը տեսնենք թէ Արագ տեսակավորման ալգորիթմը ինչպես է աշխատում 2 և 3 տարրանի զանգվաղների վրա, նախօրոք սորտավորվաԾների վրա</p>
<p>Օրինակ. 3 տարրանի զանգվածի</p>
<div class="sourceCode" id="cb20" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb20-1"><a href="#cb20-1"></a>[<span class="dv">20</span> <span class="dv">10</span> <span class="dv">30</span> ∞] =&gt; [<span class="dv">20</span> <span class="dv">10</span> <span class="dv">30</span> ∞], i &gt; j =&gt; swap (pivot, A[j]) =&gt; [<span class="dv">10</span> <span class="dv">20</span> <span class="dv">30</span> ∞]</span>
<span id="cb20-2"><a href="#cb20-2"></a> i        j      *  j   i      </span>
<span id="cb20-3"><a href="#cb20-3"></a>առանցքային էլեմենտը՝ <span class="dv">20</span> տեղափոխությունից հետո հայտնվելով իր տեղում զանգվածը բաժանում մի մի տարրանոց մասերի, </span>
<span id="cb20-4"><a href="#cb20-4"></a>իսկ մեկ տարրանոց զանգվաը համարում ենք սորտավորված, հետևաբար ամբողջ զանգվածը տեսակավորված է:</span></code></pre></div>
<p>Օրինակ. 2 տարրանի զանգվածի</p>
<div class="sourceCode" id="cb21" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb21-1"><a href="#cb21-1"></a>[<span class="dv">20</span> <span class="dv">10</span> ∞] =&gt; [<span class="dv">10</span> <span class="dv">20</span> ∞] i &gt; j =&gt; swap(pivot, A[j]) =&gt; (<span class="dv">10</span>)(<span class="dv">20</span>) ∞</span>
<span id="cb21-2"><a href="#cb21-2"></a>առանցքային տարր նույնն է ինչ որ A[j], տեղափոփում ենք ինքն իր հետ</span></code></pre></div>
<p>Զանգվածը դասավորված է ըստ աճման կարգի</p>
<div class="sourceCode" id="cb22" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb22-1"><a href="#cb22-1"></a>[<span class="dv">10</span> <span class="dv">20</span> <span class="dv">30</span> <span class="dv">40</span> <span class="dv">50</span> ∞]</span>
<span id="cb22-2"><a href="#cb22-2"></a> i              j   </span>
<span id="cb22-3"><a href="#cb22-3"></a>|    |                          |                                 |            |</span>
<span id="cb22-4"><a href="#cb22-4"></a>|----+--------------------------+---------------------------------+------------|</span>
<span id="cb22-5"><a href="#cb22-5"></a>| <span class="fl">1.</span> | [<span class="dv">10</span><span class="er">&#39;</span> <span class="dv">20</span> <span class="dv">30</span> <span class="dv">40</span> <span class="dv">50</span> ∞]      | n - elments                     | #Comp: n   |</span>
<span id="cb22-6"><a href="#cb22-6"></a>|    | i               j        |                                 |            |</span>
<span id="cb22-7"><a href="#cb22-7"></a>|    | [<span class="dv">10</span><span class="er">&#39;</span> <span class="dv">20</span> <span class="dv">30</span> <span class="dv">40</span> <span class="dv">50</span> ∞]      |                                 |            |</span>
<span id="cb22-8"><a href="#cb22-8"></a>|    | j    i                   | i &gt; j, =&gt; swap (el&#39;, A[j])      |            |</span>
<span id="cb22-9"><a href="#cb22-9"></a>|    | [() <span class="dv">10</span><span class="er">&#39;</span> (<span class="dv">20</span> <span class="dv">30</span> <span class="dv">40</span> <span class="dv">50</span>) ∞] | no element in left side         |            |</span>
<span id="cb22-10"><a href="#cb22-10"></a>|----+--------------------------+---------------------------------+------------|</span>
<span id="cb22-11"><a href="#cb22-11"></a>|    | [<span class="dv">20</span><span class="er">&#39;</span> <span class="dv">30</span> <span class="dv">40</span> <span class="dv">50</span> ∞]         | n-<span class="dv">1</span> - elements                  | #Comp: n-<span class="dv">1</span> |</span>
<span id="cb22-12"><a href="#cb22-12"></a>| <span class="fl">2.</span> | i            j           |                                 |            |</span>
<span id="cb22-13"><a href="#cb22-13"></a>|    | [<span class="dv">20</span><span class="er">&#39;</span> <span class="dv">30</span> <span class="dv">40</span> <span class="dv">50</span> ∞]         |                                 |            |</span>
<span id="cb22-14"><a href="#cb22-14"></a>|    | j    i                   | i&gt;j, =&gt; swap(el&#39;, A[j]), itself |            |</span>
<span id="cb22-15"><a href="#cb22-15"></a>|----+--------------------------+---------------------------------+------------|</span>
<span id="cb22-16"><a href="#cb22-16"></a>| <span class="fl">3.</span> | [<span class="dv">30</span><span class="er">&#39;</span> <span class="dv">40</span> <span class="dv">50</span> ∞]            | n-<span class="dv">2</span> - elements                  | #Comp: n-<span class="dv">2</span> |</span>
<span id="cb22-17"><a href="#cb22-17"></a>|    | i        j               |                                 |            |</span>
<span id="cb22-18"><a href="#cb22-18"></a>|    | [<span class="dv">30</span><span class="er">&#39;</span> <span class="dv">40</span> <span class="dv">50</span> ∞]            |                                 |            |</span>
<span id="cb22-19"><a href="#cb22-19"></a>|    | j    i                   | i&gt;j, =&gt; swap(el&#39;, A[j]), iself  |            |</span>
<span id="cb22-20"><a href="#cb22-20"></a>|----+--------------------------+---------------------------------+------------|</span>
<span id="cb22-21"><a href="#cb22-21"></a>| <span class="fl">4.</span> | [<span class="dv">40</span><span class="er">&#39;</span> <span class="dv">50</span> ∞]               | <span class="dv">2</span> - elements                    | #Comp: <span class="dv">2</span>   |</span>
<span id="cb22-22"><a href="#cb22-22"></a>|    | i     j                  |                                 |            |</span>
<span id="cb22-23"><a href="#cb22-23"></a>|    | [<span class="dv">40</span><span class="er">&#39;</span> <span class="dv">50</span> ∞]               |                                 |            |</span>
<span id="cb22-24"><a href="#cb22-24"></a>|    | j    i                   | i&gt;j, =&gt; swap(el&#39;, A[j]), isself |            |</span>
<span id="cb22-25"><a href="#cb22-25"></a>|----+--------------------------+---------------------------------+------------|</span>
<span id="cb22-26"><a href="#cb22-26"></a>| <span class="fl">5.</span> | [<span class="dv">50</span> ∞]}                  | <span class="dv">1</span> - elemetn                     |  #Comp: <span class="dv">1</span>  |</span>
<span id="cb22-27"><a href="#cb22-27"></a>|    |                          |                                 |            |</span>
<span id="cb22-28"><a href="#cb22-28"></a>|----+--------------------------+---------------------------------+------------|</span>
<span id="cb22-29"><a href="#cb22-29"></a></span>
<span id="cb22-30"><a href="#cb22-30"></a></span>
<span id="cb22-31"><a href="#cb22-31"></a>recursive call tree</span>
<span id="cb22-32"><a href="#cb22-32"></a>[n]</span>
<span id="cb22-33"><a href="#cb22-33"></a>  \</span>
<span id="cb22-34"><a href="#cb22-34"></a>   [n-<span class="dv">1</span>]</span>
<span id="cb22-35"><a href="#cb22-35"></a>     \</span>
<span id="cb22-36"><a href="#cb22-36"></a>     [n-<span class="dv">2</span>]</span>
<span id="cb22-37"><a href="#cb22-37"></a>       \</span>
<span id="cb22-38"><a href="#cb22-38"></a>       ...</span>
<span id="cb22-39"><a href="#cb22-39"></a>         \ </span>
<span id="cb22-40"><a href="#cb22-40"></a>         [<span class="dv">2</span>]</span>
<span id="cb22-41"><a href="#cb22-41"></a>           \</span>
<span id="cb22-42"><a href="#cb22-42"></a>           [<span class="dv">1</span>]  </span>
<span id="cb22-43"><a href="#cb22-43"></a></span>
<span id="cb22-44"><a href="#cb22-44"></a></span>
<span id="cb22-45"><a href="#cb22-45"></a>Ըստ աճման կարգի դասավրոված զանցվածի վրա համեմատությունների քանակը՝ </span>
<span id="cb22-46"><a href="#cb22-46"></a><span class="dv">1</span>+<span class="dv">2</span>+...+n-<span class="dv">1</span> = n*(n-<span class="dv">1</span>)/<span class="dv">2</span> ~ O(n^<span class="dv">2</span>) - ամենավատ տարվերակն է քանի որ բաժանման տեղը ձախ եզրային տարրն է:</span>
<span id="cb22-47"><a href="#cb22-47"></a></span></code></pre></div>
<p>Զանգվածը դասավրոված է ըստ նվազման կարգի</p>
<div class="sourceCode" id="cb23" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb23-1"><a href="#cb23-1"></a>[<span class="dv">50</span> <span class="dv">40</span> <span class="dv">30</span> <span class="dv">20</span> <span class="dv">10</span> ∞]</span>
<span id="cb23-2"><a href="#cb23-2"></a> i              j   </span>
<span id="cb23-3"><a href="#cb23-3"></a></span>
<span id="cb23-4"><a href="#cb23-4"></a>|----+---------------------+---------------------------------+------------|</span>
<span id="cb23-5"><a href="#cb23-5"></a>|    | [<span class="dv">50</span><span class="er">&#39;</span> <span class="dv">40</span> <span class="dv">30</span> <span class="dv">20</span> <span class="dv">10</span> ∞] | n - elements                    | #Comp: n   |</span>
<span id="cb23-6"><a href="#cb23-6"></a>| <span class="fl">1.</span> | i            j      |                                 |            |</span>
<span id="cb23-7"><a href="#cb23-7"></a>|    | [<span class="dv">50</span><span class="er">&#39;</span> <span class="dv">40</span> <span class="dv">30</span> <span class="dv">20</span> <span class="dv">10</span> ∞] |                                 |            |</span>
<span id="cb23-8"><a href="#cb23-8"></a>|    | .             j  i  | i&gt;j, =&gt; swap(el&#39;, A[j])         |            |</span>
<span id="cb23-9"><a href="#cb23-9"></a>|    | [<span class="dv">10</span> <span class="dv">40</span> <span class="dv">30</span> <span class="dv">20</span> <span class="dv">50</span> ∞]  | no element in right side        |            |</span>
<span id="cb23-10"><a href="#cb23-10"></a>|----+---------------------+---------------------------------+------------|</span>
<span id="cb23-11"><a href="#cb23-11"></a>|    | [<span class="dv">10</span><span class="er">&#39;</span> <span class="dv">40</span> <span class="dv">30</span> <span class="dv">20</span> ∞]    | <span class="dv">50</span> act like infinity            | #Comp: n-<span class="dv">1</span> |</span>
<span id="cb23-12"><a href="#cb23-12"></a>| <span class="fl">2.</span> | i            j      |                                 |            |</span>
<span id="cb23-13"><a href="#cb23-13"></a>|    | [<span class="dv">10</span><span class="er">&#39;</span> <span class="dv">40</span> <span class="dv">30</span> <span class="dv">20</span> ∞]    |                                 |            |</span>
<span id="cb23-14"><a href="#cb23-14"></a>|    | j   i               | i&gt;j, =&gt; swap(el&#39;, A[j]), itself |            |</span>
<span id="cb23-15"><a href="#cb23-15"></a>|    | [<span class="dv">10</span> <span class="dv">40</span> <span class="dv">30</span> <span class="dv">20</span> ∞]     | no element in left side         |            |</span>
<span id="cb23-16"><a href="#cb23-16"></a>|----+---------------------+---------------------------------+------------|</span>
<span id="cb23-17"><a href="#cb23-17"></a>| <span class="fl">3.</span> | [<span class="dv">40</span> <span class="dv">30</span> <span class="dv">20</span> ∞]        |                                 | #Comp: n-<span class="dv">2</span> |</span>
<span id="cb23-18"><a href="#cb23-18"></a>|    | ......              |                                 |            |</span>
<span id="cb23-19"><a href="#cb23-19"></a>|    |                     | no element in right side        |            |</span>
<span id="cb23-20"><a href="#cb23-20"></a></span>
<span id="cb23-21"><a href="#cb23-21"></a>   [n]</span>
<span id="cb23-22"><a href="#cb23-22"></a>   /</span>
<span id="cb23-23"><a href="#cb23-23"></a> [n-<span class="dv">1</span>]</span>
<span id="cb23-24"><a href="#cb23-24"></a>     \</span>
<span id="cb23-25"><a href="#cb23-25"></a>     [n-<span class="dv">2</span>]</span>
<span id="cb23-26"><a href="#cb23-26"></a>    /</span>
<span id="cb23-27"><a href="#cb23-27"></a> ...</span>
<span id="cb23-28"><a href="#cb23-28"></a></span>
<span id="cb23-29"><a href="#cb23-29"></a>Ըստ նվազման կարգի դասավրոված զանցվածի վրա համեմատությունների քանակը՝ </span>
<span id="cb23-30"><a href="#cb23-30"></a><span class="dv">1</span>+<span class="dv">2</span>+...+n-<span class="dv">1</span> = n*(n-<span class="dv">1</span>)/<span class="dv">2</span> ~ O(n^<span class="dv">2</span>) - ամենավատ տարբերակն է (Worst <span class="cf">case</span>), քանի որ բաժանման տեղը ձախ կամ աջ եզրային տարրն է, </span>
<span id="cb23-31"><a href="#cb23-31"></a>և  ստացված զանգվաղներից մեկը մի շտա դատարկ է իսկ մյուսը պարունակում է մնացած տարրերը:</span>
<span id="cb23-32"><a href="#cb23-32"></a></span></code></pre></div>
<p><strong>Լավագույն տարբերակը (Best case)</strong></p>
<p>Դիցուք ամեն անգամ <strong>բաժանման տեղը</strong> մեջտեղում է, այդ դեպքում րեկւորսիվ կանչերի ծառը կունենա այսպիսի տեսք՝</p>
<div class="sourceCode" id="cb24" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb24-1"><a href="#cb24-1"></a></span>
<span id="cb24-2"><a href="#cb24-2"></a>n=<span class="dv">15</span></span>
<span id="cb24-3"><a href="#cb24-3"></a>n - recursive calls</span>
<span id="cb24-4"><a href="#cb24-4"></a></span>
<span id="cb24-5"><a href="#cb24-5"></a>               [<span class="dv">1</span>-<span class="dv">15</span>] ~ #Comp: n </span>
<span id="cb24-6"><a href="#cb24-6"></a>              /  <span class="dv">8</span>   \</span>
<span id="cb24-7"><a href="#cb24-7"></a>             /         \</span>
<span id="cb24-8"><a href="#cb24-8"></a>         [<span class="dv">1</span>-<span class="dv">7</span>]          [<span class="dv">9</span> - <span class="dv">15</span>] ~ #Comp: n</span>
<span id="cb24-9"><a href="#cb24-9"></a>         / <span class="dv">4</span> \           / <span class="dv">12</span>   \</span>
<span id="cb24-10"><a href="#cb24-10"></a>    [<span class="dv">1</span>-<span class="dv">3</span>]   [<span class="dv">4</span>-<span class="dv">7</span>]       [<span class="dv">9</span>-<span class="dv">12</span>]    [<span class="dv">13</span>-<span class="dv">15</span>] ~ #Comp: n</span>
<span id="cb24-11"><a href="#cb24-11"></a>    / <span class="dv">2</span> \   / <span class="dv">6</span> \       / <span class="dv">10</span> \      / <span class="dv">14</span>  \ </span>
<span id="cb24-12"><a href="#cb24-12"></a>[<span class="dv">1</span>,<span class="dv">1</span>] [<span class="dv">3</span>,<span class="dv">3</span>][<span class="dv">5</span>,<span class="dv">5</span>][<span class="dv">7</span>,<span class="dv">7</span>] [<span class="dv">9</span>,<span class="dv">9</span>][<span class="dv">11</span>,<span class="dv">11</span>] [<span class="dv">13</span>,<span class="dv">13</span>][<span class="dv">15</span>,<span class="dv">15</span>] ~ #Comp: n</span>
<span id="cb24-13"><a href="#cb24-13"></a></span>
<span id="cb24-14"><a href="#cb24-14"></a>Ծառի բարձրությունը log(n), ամեն մակարդակում իրականացվում է n համեմատությում, բոլոր համեմատությունների քանակը՝ n*log(n):</span>
<span id="cb24-15"><a href="#cb24-15"></a></span>
<span id="cb24-16"><a href="#cb24-16"></a>Average Case: T = O(n*log(n))</span>
<span id="cb24-17"><a href="#cb24-17"></a>Best Case:   T = O(n*log(n)),  <span class="cf">if</span> partitioning dome in a middle. </span>
<span id="cb24-18"><a href="#cb24-18"></a>Worst Case:  T = O(n^<span class="dv">2</span>),  <span class="cf">if</span> partitioning at any end of the list - left or right: list already sorted.</span></code></pre></div>
</section>
<section id="դիտողություններ-3" class="level3">
<h3>Դիտողություններ</h3>
<ul>
<li>Արագ տեսակավորման ալգորիթմը ռեկուրսիվ ձևով օգտագործում է Բաժանման ընթացակարգը:</li>
<li>Արագ տեսակավորման ալգորիթմը կարող է աշխատել առնվազն 2 տարր պարունակող զանգվածի վրա, մեկ տարրը արդեն կարգավրոված է և կարիք չունի այլևս տեսակավորման:</li>
<li>«Արագ» բառը չի նշանակւոմ ամենարագ տեսակավորման ալգորիթն է: «Արագ» ավելի շատ նկատոի ունեն, որ ընտրված էլեմենտը շատ արագ գտնում է իր տեղը</li>
<li>Արագ տեսակավորման այլ անունները՝
<ul>
<li>Selection Echange Sort</li>
<li>Partition Exchange Sort</li>
<li>Quick Sort</li>
</ul></li>
<li>Զուգահեռներ՝ ընտրությամբ և արագ տեսակավորման ալգորիթմների աշխատանքի սկզբունքներում: Ընտրությամբ տեսակավորման դեպքում. ընտրում ենք տեղ և փնտրում ենք տարրը որը պետք է լինի այդ տեղում, իսկ արագ տեսակավորման ժամանակ՝ ընտրոմ ենք էլեմենտը և փնտրոէմ գտնում ենք այն տեղը որտեծ պետք է գտնվի այդ տարրը:
<ul>
<li>selecting a position finding an element vs selecting an element finding a position</li>
<li>index vs element</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb25" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb25-1"><a href="#cb25-1"></a><span class="co">// middle element as pivotal</span></span>
<span id="cb25-2"><a href="#cb25-2"></a>we can select middle element as pivot, exchanging with first element, then:</span>
<span id="cb25-3"><a href="#cb25-3"></a>Best Case: O(nlog(n)) - sorted list</span>
<span id="cb25-4"><a href="#cb25-4"></a>Worst <span class="cf">case</span>: partitioning at any ent - O(n^<span class="dv">2</span>) -  no definition of how looks the list of worst <span class="cf">case</span></span>
<span id="cb25-5"><a href="#cb25-5"></a></span>
<span id="cb25-6"><a href="#cb25-6"></a></span>
<span id="cb25-7"><a href="#cb25-7"></a><span class="co">// Randomly selected pivotal element - Randomised quick sort</span></span>
<span id="cb25-8"><a href="#cb25-8"></a>Best <span class="cf">case</span>: partitioning in the middle</span>
<span id="cb25-9"><a href="#cb25-9"></a>Wors <span class="cf">case</span>: partitioning at any end of the list</span>
<span id="cb25-10"><a href="#cb25-10"></a></span>
<span id="cb25-11"><a href="#cb25-11"></a></span>
<span id="cb25-12"><a href="#cb25-12"></a></span></code></pre></div>
</section>
<section id="կոդը-3" class="level3">
<h3>Կոդը</h3>
<div class="sourceCode" id="cb26" data-org-language="C"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb26-1"><a href="#cb26-1"></a><span class="dt">int</span> partition(<span class="dt">int</span> A[],<span class="dt">int</span> l,<span class="dt">int</span> h)</span>
<span id="cb26-2"><a href="#cb26-2"></a>{</span>
<span id="cb26-3"><a href="#cb26-3"></a>  <span class="dt">int</span> pivot=A[l];</span>
<span id="cb26-4"><a href="#cb26-4"></a>  <span class="dt">int</span> i=l,j=h;</span>
<span id="cb26-5"><a href="#cb26-5"></a>  <span class="cf">do</span></span>
<span id="cb26-6"><a href="#cb26-6"></a>  {</span>
<span id="cb26-7"><a href="#cb26-7"></a>    <span class="cf">do</span>{i++;}<span class="cf">while</span>(A[i] &lt;= pivot);</span>
<span id="cb26-8"><a href="#cb26-8"></a>    <span class="cf">do</span>{j--;}<span class="cf">while</span>(A[j] &gt; pivot);</span>
<span id="cb26-9"><a href="#cb26-9"></a>    <span class="cf">if</span>(i &lt; j) swap(&amp;A[i], &amp;A[j]);</span>
<span id="cb26-10"><a href="#cb26-10"></a></span>
<span id="cb26-11"><a href="#cb26-11"></a>  }<span class="cf">while</span>(i &lt; j);</span>
<span id="cb26-12"><a href="#cb26-12"></a></span>
<span id="cb26-13"><a href="#cb26-13"></a>  swap(&amp;A[l], &amp;A[j]);</span>
<span id="cb26-14"><a href="#cb26-14"></a></span>
<span id="cb26-15"><a href="#cb26-15"></a>  <span class="cf">return</span> j;</span>
<span id="cb26-16"><a href="#cb26-16"></a>}</span>
<span id="cb26-17"><a href="#cb26-17"></a></span>
<span id="cb26-18"><a href="#cb26-18"></a><span class="dt">void</span> QuickSort(<span class="dt">int</span> A[],<span class="dt">int</span> l,<span class="dt">int</span> h)</span>
<span id="cb26-19"><a href="#cb26-19"></a>{</span>
<span id="cb26-20"><a href="#cb26-20"></a>  <span class="dt">int</span> j;</span>
<span id="cb26-21"><a href="#cb26-21"></a>  <span class="cf">if</span>(l &lt; h)</span>
<span id="cb26-22"><a href="#cb26-22"></a>  {</span>
<span id="cb26-23"><a href="#cb26-23"></a>    j = partition(A,l,h);</span>
<span id="cb26-24"><a href="#cb26-24"></a>    QuickSort(A,l,j);</span>
<span id="cb26-25"><a href="#cb26-25"></a>    QuickSort(A,j+<span class="dv">1</span>,h);</span>
<span id="cb26-26"><a href="#cb26-26"></a>  }</span>
<span id="cb26-27"><a href="#cb26-27"></a>}</span>
<span id="cb26-28"><a href="#cb26-28"></a></span>
<span id="cb26-29"><a href="#cb26-29"></a><span class="dt">void</span> swap(<span class="dt">int</span> *x,<span class="dt">int</span> *y)</span>
<span id="cb26-30"><a href="#cb26-30"></a>{</span>
<span id="cb26-31"><a href="#cb26-31"></a>  <span class="dt">int</span> temp=*x;</span>
<span id="cb26-32"><a href="#cb26-32"></a>  *x = *y;</span>
<span id="cb26-33"><a href="#cb26-33"></a>  *y = temp;</span>
<span id="cb26-34"><a href="#cb26-34"></a>}</span>
<span id="cb26-35"><a href="#cb26-35"></a></span>
<span id="cb26-36"><a href="#cb26-36"></a><span class="dt">int</span> main()</span>
<span id="cb26-37"><a href="#cb26-37"></a>{</span>
<span id="cb26-38"><a href="#cb26-38"></a>  <span class="dt">int</span> A[] = {<span class="dv">11</span>, <span class="dv">13</span>, <span class="dv">7</span>, <span class="dv">12</span>, <span class="dv">16</span>, <span class="dv">9</span>, <span class="dv">24</span>, <span class="dv">5</span>, <span class="dv">10</span>, <span class="dv">3</span>, INT32_MAX};</span>
<span id="cb26-39"><a href="#cb26-39"></a>  <span class="dt">int</span> n = <span class="dv">11</span>, i;</span>
<span id="cb26-40"><a href="#cb26-40"></a></span>
<span id="cb26-41"><a href="#cb26-41"></a>  QuickSort(A, <span class="dv">0</span>, n-<span class="dv">1</span>);</span>
<span id="cb26-42"><a href="#cb26-42"></a></span>
<span id="cb26-43"><a href="#cb26-43"></a>  <span class="cf">for</span>(i = <span class="dv">0</span>; i &lt; n; i++)</span>
<span id="cb26-44"><a href="#cb26-44"></a>    printf(<span class="st">&quot;%d &quot;</span>, A[i]);</span>
<span id="cb26-45"><a href="#cb26-45"></a></span>
<span id="cb26-46"><a href="#cb26-46"></a>  printf(<span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span>);</span>
<span id="cb26-47"><a href="#cb26-47"></a>  <span class="cf">return</span> <span class="dv">0</span>;</span>
<span id="cb26-48"><a href="#cb26-48"></a>}</span>
<span id="cb26-49"><a href="#cb26-49"></a></span></code></pre></div>
</section>
</section>
</section>
</div>

<div class="row">
        <span class="date  text-right">
            <i class="fa fa-calenda"></i> Posted on December  2, 2020
        </span>
        <span class="tags text-right" style="width: 100%">
            <ul class="list-inline"><li><i class="fa fa-tags"></i></li><li><a href="/tags/sorting.html">sorting</a></li><li><a href="/tags/algorithms.html">algorithms</a></li></ul>
        </span>
</div>
]]></description>
    <pubDate>Wed, 02 Dec 2020 00:00:00 UT</pubDate>
    <guid>http://imast.am/mitq/programming/sorting-algorithms.html</guid>
    <dc:creator>Arthur Vardanyan</dc:creator>
</item>
<item>
    <title>Online Courses</title>
    <link>http://imast.am/mitq/programming/online-courses.html</link>
    <description><![CDATA[<div class="post-content">
<div id="TOC"><ul>
<li><a href="#data-structures-algorithms">Data Structures &amp; Algorithms</a><ul>
<li><a href="#introduction-to-algorithms">1. Introduction to Algorithms</a></li>
<li><a href="#divide-and-conquer">2 Divide and Conquer</a></li>
<li><a href="#greedy-mehod">3. Greedy Mehod</a></li>
<li><a href="#dynamic-programing">3. Dynamic Programing</a></li>
<li><a href="#graphs">5. Graphs</a></li>
<li><a href="#backtracking">6. Backtracking</a></li>
<li><a href="#branch-and-bound">7. Branch and Bound</a></li>
<li><a href="#np-problems">8. Np problems</a></li>
<li><a href="#string-algorithms">9. String Algorithms</a></li>
<li><a href="#trees">10. Trees</a></li>
<li><a href="#misc">11. Misc</a></li>
<li><a href="#programming-concepts">Programming Concepts</a></li>
</ul></li>
</ul></div>
<section id="data-structures-algorithms" class="level1">
<h1>Data Structures &amp; Algorithms</h1>
<section id="introduction-to-algorithms" class="level2">
<h2>1. Introduction to Algorithms</h2>
<ul>
<li><a href="https://www.youtube.com/watch?v=0IAPZzGSbME&amp;list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&amp;index=1">1. Introduction to Algorithms</a></li>
<li><a href="https://www.youtube.com/watch?v=-JTq1BFBwmo&amp;list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&amp;index=2">1.1 Priori Analysis and Posteriori Testing</a></li>
<li><a href="https://www.youtube.com/watch?v=FbYzBWdhMb0&amp;list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&amp;index=3">1.2 Characteristics of Algorithm</a></li>
<li><a href="http://youtu.be/xGYsEqe9Vl0">1.3 How Write and Analyze Algorithm</a></li>
<li><a href="http://youtu.be/1U3Uwct45IY">1.4 Frequency Count Method</a></li>
<li><a href="http://youtu.be/9TlHvipP5yA">1.5.1 Time Complexity #1</a></li>
<li><a href="http://youtu.be/9SgLBjXqwd4">1.5.2 Time Complexity Example #2</a></li>
<li><a href="http://youtu.be/p1EnSvS3urU">1.5.3 Time Complexity of While and if #3</a></li>
<li><a href="http://youtu.be/w7t4_JUUTeg">1.6 Classes of functions</a></li>
<li><a href="http://youtu.be/5v-tKX2uRAk">1.7 Compare Class of Functions</a></li>
<li><a href="http://youtu.be/A03oI0znAoc">1.8.1 Asymptotic Notations Big Oh - Omega - Theta #1</a></li>
<li><a href="http://youtu.be/Nd0XDY-jVHs">1.8.2 Asymptotic Notations Big Oh - Omega - Theta #2</a></li>
<li><a href="http://youtu.be/NI4OKSvGAgM">1.9 Properties of Asymptotic Notations</a></li>
<li><a href="http://youtu.be/mwN18xfwNhk">1.10.1 Comparison of Functions #1</a></li>
<li><a href="http://youtu.be/WlBBTSL0ZRc">1.10.2 Comparison of Functions #2</a></li>
<li><a href="http://youtu.be/lj3E24nnPjI">1.11 Best Worst and Average Case Analysis</a></li>
<li><a href="http://youtu.be/wU6udHRIkcc">1.12 Disjoint Sets Data Structure - Weighted Union and Collapsing Find</a></li>
</ul>
</section>
<section id="divide-and-conquer" class="level2">
<h2>2 Divide and Conquer</h2>
<ul>
<li><a href="http://youtu.be/2Rr2tW9zvRg">2 Divide And Conquer</a></li>
<li><a href="http://youtu.be/4V30R3I1vLI">2.1.1 Recurrence Relation (T(n)= T(n-1) + 1) #1</a></li>
<li><a href="http://youtu.be/IawM82BQ4II">2.1.2 Recurrence Relation (T(n)= T(n-1) + n) #2</a></li>
<li><a href="http://youtu.be/MhT7XmxhaCE">2.1.3 Recurrence Relation (T(n)= T(n-1) + log n) #3</a></li>
<li><a href="http://youtu.be/JvcqtZk2mng">2.1.4 Recurrence Relation T(n)=2 T(n-1)+1 #4</a></li>
<li><a href="http://youtu.be/CyknhZbfMqc">2.2 Masters Theorem Decreasing Function</a></li>
<li><a href="http://youtu.be/8gt0D0IqU5w">2.3.1 Recurrence Relation Dividing Function T(n)=T(n/2)+1 #1</a></li>
<li><a href="http://youtu.be/XcZw01FuH18">2.3.2 Recurrence Relation Dividing {T(n)=T(n/2) +n} #2</a></li>
<li><a href="http://youtu.be/1K9ebQJosvo">2.3.3 Recurrence Relation {T(n)= 2T(n/2) +n} #3</a></li>
<li><a href="http://youtu.be/OynWkEj0S-s">2.4.1 Masters Theorem in Algorithms for Dividing Function #1</a></li>
<li><a href="http://youtu.be/kGcO-nAm9Vc">2.4.2 Examples for Master Theorem #2</a></li>
<li><a href="http://youtu.be/9rVuyjxzwgM">2.5 Root function (Recurrence Relation)</a></li>
<li><a href="http://youtu.be/C2apEw9pgtw">2.6.1 Binary Search Iterative Method</a></li>
<li><a href="http://youtu.be/uEUXGcc2VXM">2.6.2 Binary Search Recursive Method</a></li>
<li><a href="http://youtu.be/HqPJF2L5h9U">2.6.3 Heap - Heap Sort - Heapify - Priority Queues</a></li>
<li><a href="http://youtu.be/6pV2IF0fgKY">2.7.1 Two Way MergeSort - Iterative method</a></li>
<li><a href="http://youtu.be/mB5HXBb_HY">2.7.2 Merge Sort Algorithm</a></li>
<li><a href="http://youtu.be/ak-pz7tS5DE">2.7.3 MergeSort in-depth Analysis</a></li>
<li><a href="http://youtu.be/7h1s2SojIRw">2.8.1 QuickSort Algorithm</a></li>
<li><a href="http://youtu.be/-qOVVRIZzao">2.8.2 QuickSort Analysis</a></li>
<li><a href="http://youtu.be/0oJyNmEbS4w">2.9 Strassens Matrix Multiplication</a></li>
</ul>
</section>
<section id="greedy-mehod" class="level2">
<h2>3. Greedy Mehod</h2>
<ul>
<li><a href="http://youtu.be/ARvQcqJ_-NY">3. Greedy Method - Introduction</a></li>
<li><a href="http://youtu.be/oTTzNMHM05I">3.1 Knapsack Problem - Greedy Method</a></li>
<li><a href="http://youtu.be/zPtI8q9gvX8">3.2 Job Sequencing with Deadlines - Greedy Method</a></li>
<li><a href="http://youtu.be/HHIc5JZyenI">3.3 Optimal Merge Pattern - Greedy Method</a></li>
<li><a href="http://youtu.be/co4_ahEDCho">3.4 Huffman Coding - Greedy Method</a></li>
<li><a href="http://youtu.be/4ZlRH0eK-qQ">3.5 Prims and Kruskals Algorithms - Greedy Method</a></li>
<li><a href="http://youtu.be/XB4MIexjvY0">3.6 Dijkstra Algorithm - Single Source Shortest Path - Greedy Method</a></li>
</ul>
</section>
<section id="dynamic-programing" class="level2">
<h2>3. Dynamic Programing</h2>
<ul>
<li><a href="http://youtu.be/5dRGRueKU3M">4 Principle of Optimality - Dynamic Programming introduction</a></li>
<li><a href="http://youtu.be/9iE9Mj4m8jk">4.1 MultiStage Graph - Dynamic Programming</a></li>
<li><a href="http://youtu.be/FcScLYJI42E">4.1.1 MultiStage Graph (Program) - Dynamic Programming</a></li>
<li><a href="http://youtu.be/oNI0rf2P9gE">4.2 All Pairs Shortest Path (Floyd-Warshall) - Dynamic Programming</a></li>
<li><a href="http://youtu.be/prx1psByp7U">4.3 Matrix Chain Multiplication - Dynamic Programming</a></li>
<li><a href="http://youtu.be/_WncuhSJZyA">(New) Matrix Chain Multiplication using Dynamic Programming Formula</a></li>
<li><a href="http://youtu.be/eKkXU3uu2zk">4.3.1 Matrix Chain Multiplication (Program) - Dynamic Programming</a></li>
<li><a href="http://youtu.be/FtN3BYH2Zes">4.4 Bellman Ford Algorithm - Single Source Shortest Path - Dynamic Programming</a></li>
<li><a href="http://youtu.be/nLmhmB6NzcM">4.5 0/1 Knapsack - Two Methods - Dynamic Programming</a></li>
<li><a href="http://youtu.be/zRza99HPvkQ">4.5.1 0/1 Knapsack Problem (Program) - Dynamic Programming</a></li>
<li><a href="http://youtu.be/vLS-zRCHo-Y">4.6 Optimal Binary Search Tree (Successful Search Only) - Dynamic Programming</a></li>
<li><a href="http://youtu.be/wAy6nDMPYAE">4.6.2 (New) Optimal Binary Search Tree Successful and Unsuccessful Probability - Dynamic Programming</a></li>
<li><a href="http://youtu.be/Q4zHb-Swzro">4.7 (New) Traveling Salesman Problem - Dynamic Programming using Formula</a></li>
<li><a href="http://youtu.be/uJOmqBwENB8">4.8 Reliability Design - Dynamic Programming</a></li>
<li><a href="http://youtu.be/sSno9rV8Rhg">4.9 Longest Common Subsequence (LCS) - Recursion and Dynamic Programming</a></li>
<li></li>
<li><a href="http://youtu.be/oBt53YbR9Kk">Dynamic Programming - Learn to Solve Algorithmic Problems &amp; Coding Challenges</a></li>
</ul>
</section>
<section id="graphs" class="level2">
<h2>5. Graphs</h2>
<ul>
<li><a href="http://youtu.be/pcKY4hjDrxk">5.1 Graph Traversals - BFS &amp; DFS -Breadth First Search and Depth First Search</a></li>
<li><a href="http://youtu.be/jFZsDDB0-vo">5.2 Articulation Point and Biconnected Components</a></li>
</ul>
</section>
<section id="backtracking" class="level2">
<h2>6. Backtracking</h2>
<ul>
<li><a href="http://youtu.be/DKCbsiDBN6c">6 Introduction to Backtracking - Brute Force Approach</a></li>
<li><a href="http://youtu.be/xFv_Hl4B83A">6.1 N Queens Problem using Backtracking</a></li>
<li><a href="http://youtu.be/kyLxTdsT8ws">6.2 Sum Of Subsets Problem - Backtracking</a></li>
<li><a href="http://youtu.be/052VkKhIaQ4">6.3 Graph Coloring Problem - Backtracking</a></li>
<li><a href="http://youtu.be/dQr4wZCiJJ4">6.4 Hamiltonian Cycle - Backtracking</a></li>
</ul>
</section>
<section id="branch-and-bound" class="level2">
<h2>7. Branch and Bound</h2>
<ul>
<li><a href="http://youtu.be/3RBNPc0_Q6g">7 Branch and Bound Introduction</a></li>
<li><a href="http://youtu.be/M7Fl_z7_J2k">7.1 Job Sequencing with Deadline - Branch and Bound</a></li>
<li><a href="http://youtu.be/yV1d-b_NeK8">7.2 0/1 Knapsack using Branch and Bound</a></li>
<li><a href="http://youtu.be/1FEP_sNb62k">7.3 Traveling Salesman Problem - Branch and Bound</a></li>
</ul>
</section>
<section id="np-problems" class="level2">
<h2>8. Np problems</h2>
<ul>
<li><a href="http://youtu.be/e2cF8a5aAhE">8. NP-Hard and NP-Complete Problems</a></li>
<li><a href="http://youtu.be/qZs767KQcvE">8.1 NP-Hard Graph Problem - Clique Decision Problem</a></li>
</ul>
</section>
<section id="string-algorithms" class="level2">
<h2>9. String Algorithms</h2>
<ul>
<li><a href="http://youtu.be/V5-7GzOfADQ">9.1 Knuth-Morris-Pratt KMP String Matching Algorithm</a></li>
<li><a href="http://youtu.be/qQ8vS2btsxI">9.2 Rabin-Karp String Matching Algorithm</a></li>
</ul>
</section>
<section id="trees" class="level2">
<h2>10. Trees</h2>
<ul>
<li><a href="http://youtu.be/jDM6_TnYIqE">10.1 AVL Tree - Insertion and Rotations</a></li>
<li><a href="http://youtu.be/aZjYr87r1b8">10.2 B Trees and B+ Trees. How they are useful in Databases</a></li>
</ul>
</section>
<section id="misc" class="level2">
<h2>11. Misc</h2>
<ul>
<li><a href="http://youtu.be/ddsP7NecEBk">Asymptotic Notations - Simplified</a></li>
<li><a href="http://youtu.be/mFY0J5W8Udk">Hashing Technique - Simplified</a></li>
<li><a href="http://youtu.be/2raV0H9KqY8">Shortest Path Algorithms (Dijkstra and Bellman-Ford) - Simplified</a></li>
<li><a href="http://youtu.be/kyUpc_5705s">BFS DFS - Simplified</a></li>
<li><a href="http://youtu.be/q6RicK1FCUs">Tower of Hanoi Problem - Made Easy</a></li>
<li><a href="http://youtu.be/MJZd6uPi88E">Row-Major and Column-Major Mapping</a></li>
</ul>
</section>
<section id="programming-concepts" class="level2">
<h2>Programming Concepts</h2>
<ul>
<li><a href="http://youtu.be/OqLt2GfX6jg">Uses of pointers</a></li>
<li><a href="http://youtu.be/PdvGEI-P3-M">Stack vs Heap</a></li>
<li><a href="http://youtu.be/uMGwjNuidZU">Pointer Arithmetic - *p++; *++p; ++*p;</a></li>
<li><a href="http://youtu.be/868qXWoGS9E">Pointer to Array</a></li>
<li><a href="http://youtu.be/ygK0YON10sQ">Recursion and Stack</a></li>
</ul>
</section>
</section>
</div>

<div class="row">
        <span class="date  text-right">
            <i class="fa fa-calenda"></i> Posted on December  1, 2020
        </span>
        <span class="tags text-right" style="width: 100%">
            <ul class="list-inline"><li><i class="fa fa-tags"></i></li><li><a href="/tags/courses.html">courses</a></li></ul>
        </span>
</div>
]]></description>
    <pubDate>Tue, 01 Dec 2020 00:00:00 UT</pubDate>
    <guid>http://imast.am/mitq/programming/online-courses.html</guid>
    <dc:creator>Arthur Vardanyan</dc:creator>
</item>
<item>
    <title>Coq installation</title>
    <link>http://imast.am/mitq/programming/how-to-install-coq.html</link>
    <description><![CDATA[<div class="post-content">

<p>*</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a><span class="co"># install ocaml palcage manager</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="fu">sh</span> <span class="op">&lt;(</span><span class="ex">curl</span> -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh<span class="op">)</span></span>
<span id="cb1-3"><a href="#cb1-3"></a></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="co"># Install bubblewrap on Ubuntu 18.04</span></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="fu">sudo</span> apt update</span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="fu">sudo</span> apt install bubblewrap</span>
<span id="cb1-7"><a href="#cb1-7"></a></span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="co"># Using OPAM to install Coq</span></span>
<span id="cb1-9"><a href="#cb1-9"></a><span class="bu">export</span> <span class="va">OPAMROOT=</span>~/opam-coq.8.8.2 <span class="co"># installation directory</span></span>
<span id="cb1-10"><a href="#cb1-10"></a><span class="ex">opam</span> init -n --comp=ocaml-base-compiler.4.02.3 -j 2 <span class="co"># 2 is the number of CPU cores</span></span>
<span id="cb1-11"><a href="#cb1-11"></a><span class="ex">opam</span> repo add coq-released http://coq.inria.fr/opam/released</span>
<span id="cb1-12"><a href="#cb1-12"></a><span class="ex">opam</span> install coq.8.8.2 <span class="kw">&amp;&amp;</span> <span class="ex">opam</span> pin add coq 8.8.2</span>
<span id="cb1-13"><a href="#cb1-13"></a></span>
<span id="cb1-14"><a href="#cb1-14"></a><span class="co"># Running Coq</span></span>
<span id="cb1-15"><a href="#cb1-15"></a><span class="bu">export</span> <span class="va">OPAMROOT=</span>~/opam-coq.8.8.2</span>
<span id="cb1-16"><a href="#cb1-16"></a><span class="bu">eval</span> <span class="kw">`</span><span class="ex">opam</span> config env<span class="kw">`</span></span>
<span id="cb1-17"><a href="#cb1-17"></a><span class="ex">coqc</span> -v</span>
<span id="cb1-18"><a href="#cb1-18"></a></span>
<span id="cb1-19"><a href="#cb1-19"></a><span class="co"># Using OPAM to install Coq packages</span></span>
<span id="cb1-20"><a href="#cb1-20"></a><span class="ex">opam</span> search coq</span>
<span id="cb1-21"><a href="#cb1-21"></a><span class="ex">opam</span> show coq-sudoku</span>
<span id="cb1-22"><a href="#cb1-22"></a><span class="ex">opam</span> install coq-sudoku</span>
<span id="cb1-23"><a href="#cb1-23"></a></span></code></pre></div>
</div>

<div class="row">
        <span class="date  text-right">
            <i class="fa fa-calenda"></i> Posted on November 26, 2018
        </span>
        <span class="tags text-right" style="width: 100%">
            <ul class="list-inline"><li><i class="fa fa-tags"></i></li><li><a href="/tags/coq.html">coq</a></li><li><a href="/tags/SF.html">SF</a></li></ul>
        </span>
</div>
]]></description>
    <pubDate>Mon, 26 Nov 2018 00:00:00 UT</pubDate>
    <guid>http://imast.am/mitq/programming/how-to-install-coq.html</guid>
    <dc:creator>Arthur Vardanyan</dc:creator>
</item>
<item>
    <title>Պատահական Երևույթներ նկարագրող մոդել</title>
    <link>http://imast.am/mitq/math/seminars/havtes-intro.html</link>
    <description><![CDATA[<div class="post-content">
<div id="TOC"><ul>
<li><a href="#պատահական-երևույթներ-նկարագրող-մոդել">Պատահական Երևույթներ նկարագրող մոդել</a><ul>
<li><a href="#գաղափարներ">Գաղափարներ</a></li>
</ul></li>
<li><a href="#հավանականության-սահմանումները">Հավանականության Սահմանումները</a><ul>
<li><a href="#աքսիոմատիկ">Աքսիոմատիկ</a></li>
<li><a href="#դասական">Դասական</a></li>
</ul></li>
</ul></div>
<p><strong>Մոդել = {Գաղափներ, Աքսիոմներ}</strong></p>
<section id="պատահական-երևույթներ-նկարագրող-մոդել" class="level1">
<h1>Պատահական Երևույթներ նկարագրող մոդել</h1>
<section id="գաղափարներ" class="level2">
<h2>Գաղափարներ</h2>
<ol>
<li><p><strong>Վիճակագրական փորձ</strong></p></li>
<li><p><strong>Տարական պատահույթ</strong> - փորձի պարզագույն ելք</p>
<p>Օրինակ. Զառ նետել` Ω = {ω<sub>1</sub>, ω<sub>2</sub>, ω<sub>3</sub>, ω<sub>4</sub>, ω<sub>5</sub>, ω<sub>6</sub>}</p>
<p>Ω - տարրական պատահույթների բազմություն</p></li>
<li><p><strong>Պատահույթ</strong></p>
<p>F = Ω-ի որևէ ենթաբազմությունների բազմ է, որը կազմում է σ Հանրահաշիվ</p></li>
</ol>
<span class="math display">\[\begin{equation}
   1. \Omega \in F \\
   2. A \subset F \Rightarrow \bar A \not\in F \Rightarrow
      \varnothing \subset F \\
   3. \forall A_1, A_2,...,A_n \in F \Rightarrow
      \bigcup_{i=1}^{\infty} A_{i} \subset F
\end{equation}
\]</span>
<p>F-ի տարրերը կոչվում են պատահույթներ: Կասենք A պատահույթը տեղի է ունեցել եթե փորձի տարրական ելքը ∈ A:</p>
<p>∅ ∈ F - անհնար պատահույթ, իսկ Ω - հավաստի պատահույթ Օրինակ. Զառի նետման խնդիրը <span class="math display">\[
      F={\varnothing, \Omega, \{\omega_1}, {\omega_2},...,{\omega_6},...\{...\} \} \\
      A=\{ \text{կբացվի զույգ թիվ} \} = \{ \omega_2, \omega_4, \omega_6 \} \\
      \bar A = \{ \text{կբացվի  կենտ  թիվ} \} = \{ \omega_1, \omega_3, \omega_5 \} \\
     \]</span></p>
<ol>
<li><p><strong>Հավանականություն</strong> (գաղափար)</p>
<p>Հավանականությունը պատահույթի հանդես գալու թվային գնահատականն է, որը մաթեմատիկական ֆունկցիա է՝ P : F → R, այսինքն ֆունկցիա է, որը <span class="math display">\[

\text{Աքսիոմներ} \\
\\
  1. P(\Omega) = 1 \\
  2. \forall A \in F, P(A) \geq 0 \\
  3. \forall A_1, A_2,...,A_n \text{անհամատեղելի պատահույթների
    համար, ապա} \\

     \bigcup_{i=1}^{n} A_{i}  = \Sigma_{i=1}^{n} P(A_{i})

   \]</span></p>
<p><strong>Սահմանում</strong>. Կասենք A և B անհամատեղելի պատահույթներ եթե A ∩ B = ∅ Օրինակ. կբացվի զույգ թէ կբացվի կենտ</p></li>
</ol>
</section>
</section>
<section id="հավանականության-սահմանումները" class="level1">
<h1>Հավանականության Սահմանումները</h1>
<section id="աքսիոմատիկ" class="level2">
<h2>Աքսիոմատիկ</h2>
<p>Կոլմոգորով</p>
<p>(Ω, F, P) - Հավանականային Տարածություն</p>
</section>
<section id="դասական" class="level2">
<h2>Դասական</h2>
<p>Ω տարերը վերջավոր են<br />
Ω ={ ω<sub>1</sub>, ω<sub>2</sub>, …, ω<sub>n</sub> }  հավասարահնարավոր, հվասարահավանական են<br />
F=Ω-ի ենթբազմերի բազմն է<br />
P(ω<sub>i</sub>) = 1/n, i=1,..,n<br />
Պտահույթի հավանականությունը</p>
<p>P(A)=<strong>N</strong><sub>A</sub>/N</p>
</section>
</section>
</div>

<div class="row">
        <span class="date  text-right">
            <i class="fa fa-calenda"></i> Posted on October 31, 2018
        </span>
        <span class="tags text-right" style="width: 100%">
            <ul class="list-inline"><li><i class="fa fa-tags"></i></li><li><a href="/tags/math.html">math</a></li><li><a href="/tags/seminar.html">seminar</a></li></ul>
        </span>
</div>
]]></description>
    <pubDate>Wed, 31 Oct 2018 00:00:00 UT</pubDate>
    <guid>http://imast.am/mitq/math/seminars/havtes-intro.html</guid>
    <dc:creator>Arthur Vardanyan</dc:creator>
</item>
<item>
    <title>Սեմինարներ/Seminars</title>
    <link>http://imast.am/mitq/math/seminars.html</link>
    <description><![CDATA[<div class="post-content">
<div id="TOC"><ul>
<li><a href="#հավանականությունների-տեսություն">Հավանականությունների Տեսություն</a></li>
</ul></div>
<section id="հավանականությունների-տեսություն" class="level3">
<h3>Հավանականությունների Տեսություն</h3>
<p>Սկիզբը 31.10.2018, Փ. Հակոբյանի հետ Խոսելու ենք նաև «Ձևադրական ստուգման համակարգերի» մասին</p>
<ol>
<li><p><a href="./seminars/havtes-intro.html">Ներածություն</a></p></li>
</ol>
</section>
</div>

<div class="row">
        <span class="date  text-right">
            <i class="fa fa-calenda"></i> Posted on October 31, 2018
        </span>
        <span class="tags text-right" style="width: 100%">
            <ul class="list-inline"><li><i class="fa fa-tags"></i></li><li><a href="/tags/math.html">math</a></li><li><a href="/tags/seminar.html">seminar</a></li></ul>
        </span>
</div>
]]></description>
    <pubDate>Wed, 31 Oct 2018 00:00:00 UT</pubDate>
    <guid>http://imast.am/mitq/math/seminars.html</guid>
    <dc:creator>Arthur Vardanyan</dc:creator>
</item>
<item>
    <title>NixOS</title>
    <link>http://imast.am/mitq/programming/nixos.html</link>
    <description><![CDATA[<div class="post-content">
<div id="TOC"><ul>
<li><a href="#nixos-in-hetzner-machine">NixOS in hetzner machine</a><ul>
<li><a href="#enable-ssh">enable ssh</a></li>
</ul></li>
<li><a href="#install-with-nix-env">install with nix-env</a><ul>
<li><a href="#install-emacs">install emacs</a></li>
</ul></li>
<li><a href="#emacs-under-nix-shell">Emacs under nix-shell</a></li>
</ul></div>
<p><a href="https://github.com/Gabriel439/haskell-nix">https://github.com/Gabriel439/haskell-nix</a> <a href="https://www.domenkozar.com/2014/03/11/why-puppet-chef-ansible-arent-good-enough-and-we-can-do-better/">https://www.domenkozar.com/2014/03/11/why-puppet-chef-ansible-arent-good-enough-and-we-can-do-better/</a> <a href="https://wiki.ocharles.org.uk/posts/2014-02-04-how-i-develop-with-nixos.html">https://wiki.ocharles.org.uk/posts/2014-02-04-how-i-develop-with-nixos.html</a> <a href="http://lucumr.pocoo.org/2013/11/17/my-favorite-database/">http://lucumr.pocoo.org/2013/11/17/my-favorite-database/</a> <a href="https://www.fosskers.ca/blog/nix-en.html">https://www.fosskers.ca/blog/nix-en.html</a> <a href="https://nixos.org/nixpkgs/manual/#users-guide-to-the-haskell-infrastructure">https://nixos.org/nixpkgs/manual/#users-guide-to-the-haskell-infrastructure</a></p>
<section id="nixos-in-hetzner-machine" class="level1">
<h1>NixOS in hetzner machine</h1>
<section id="enable-ssh" class="level2">
<h2>enable ssh</h2>
<p>enable sshd in hetzner, put in user data</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a><span class="co"># generate config file</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="ex">nixos-generate-config</span> --root /mnt</span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="ex">vi</span> /mnt/etc/nixos/configuration.nix</span>
<span id="cb1-4"><a href="#cb1-4"></a></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="co"># uncomment ssh</span></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="ex">services.sshd.enable</span> = true<span class="kw">;</span></span></code></pre></div>
</section>
</section>
<section id="install-with-nix-env" class="level1">
<h1>install with nix-env</h1>
<section id="install-emacs" class="level2">
<h2>install emacs</h2>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1"></a><span class="co"># figure out the proper attribute path for emacs pakages</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="ex">nix-env</span> -qaP emacs</span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="op">&gt;</span> <span class="ex">nixpkgs.emacs25</span>  emacs-25.3</span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="op">&gt;</span> <span class="ex">nixpkgs.emacs</span>    emacs-26.1</span>
<span id="cb2-5"><a href="#cb2-5"></a></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="co"># install emacs</span></span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="ex">nix-env</span> -iA nixpkgs.emacs</span>
<span id="cb2-8"><a href="#cb2-8"></a></span></code></pre></div>
<p>_</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1"></a><span class="co"># list ghc compilers</span></span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="ex">nix-env</span> -f <span class="st">&quot;&lt;nixpkgs&gt;&quot;</span> -qaP -A haskell.compiler</span>
<span id="cb3-3"><a href="#cb3-3"></a></span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="co"># install cabal-install</span></span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="ex">nix-env</span> -f <span class="st">&quot;&lt;nixpkgs&gt;&quot;</span> -iA haskellPackages.ghc haskellPackages.cabal-install</span>
<span id="cb3-6"><a href="#cb3-6"></a><span class="co"># or more specific</span></span>
<span id="cb3-7"><a href="#cb3-7"></a><span class="ex">nix-env</span> -f <span class="st">&quot;&lt;nixpkgs&gt;&quot;</span> -iA haskell.compiler.integer-simple.ghc863 haskellPackages.cabal-install</span>
<span id="cb3-8"><a href="#cb3-8"></a></span>
<span id="cb3-9"><a href="#cb3-9"></a><span class="co"># enter nix-shell where ghc 8.6.3</span></span>
<span id="cb3-10"><a href="#cb3-10"></a> <span class="ex">nix-shell</span> -p haskell.compiler.integer-simple.ghc863</span>
<span id="cb3-11"><a href="#cb3-11"></a></span>
<span id="cb3-12"><a href="#cb3-12"></a><span class="co"># install (if not exists) and enter the nix-shell with ghc 8.4.4</span></span>
<span id="cb3-13"><a href="#cb3-13"></a><span class="ex">nix-shell</span> -p haskell.compiler.ghc844</span></code></pre></div>
</section>
</section>
<section id="emacs-under-nix-shell" class="level1">
<h1>Emacs under nix-shell</h1>
</section>
</div>

<div class="row">
        <span class="date  text-right">
            <i class="fa fa-calenda"></i> Posted on October 14, 2018
        </span>
        <span class="tags text-right" style="width: 100%">
            <ul class="list-inline"><li><i class="fa fa-tags"></i></li><li><a href="/tags/nixos.html">nixos</a></li></ul>
        </span>
</div>
]]></description>
    <pubDate>Sun, 14 Oct 2018 00:00:00 UT</pubDate>
    <guid>http://imast.am/mitq/programming/nixos.html</guid>
    <dc:creator>Arthur Vardanyan</dc:creator>
</item>

    </channel>
</rss>
