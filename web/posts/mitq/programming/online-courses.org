---
title: Online Courses
tags: courses
date: 2020-12-01
description: DESCRIPTION
comments: true
toc: true
---


* Data Structures & Algorithms
** 1. Introduction to Algorithms
  - [[https://www.youtube.com/watch?v=0IAPZzGSbME&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=1][1. Introduction to Algorithms]]
  - [[https://www.youtube.com/watch?v=-JTq1BFBwmo&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=2][1.1 Priori Analysis and Posteriori Testing]]
  - [[https://www.youtube.com/watch?v=FbYzBWdhMb0&list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&index=3][1.2 Characteristics of Algorithm]]
  - [[http://youtu.be/xGYsEqe9Vl0][1.3 How Write and Analyze Algorithm]]
  - [[http://youtu.be/1U3Uwct45IY][1.4 Frequency Count Method]]
  - [[http://youtu.be/9TlHvipP5yA][1.5.1 Time Complexity #1]]
  - [[http://youtu.be/9SgLBjXqwd4][1.5.2 Time Complexity Example #2]]
  - [[http://youtu.be/p1EnSvS3urU][1.5.3 Time Complexity of While and if #3]]
  - [[http://youtu.be/w7t4_JUUTeg][1.6 Classes of functions]]
  - [[http://youtu.be/5v-tKX2uRAk][1.7 Compare Class of Functions]]
  - [[http://youtu.be/A03oI0znAoc][1.8.1 Asymptotic Notations Big Oh - Omega - Theta #1]]
  - [[http://youtu.be/Nd0XDY-jVHs][1.8.2 Asymptotic Notations Big Oh - Omega - Theta #2]]
  - [[http://youtu.be/NI4OKSvGAgM][1.9 Properties of Asymptotic Notations]]
  - [[http://youtu.be/mwN18xfwNhk][1.10.1 Comparison of Functions #1]]
  - [[http://youtu.be/WlBBTSL0ZRc][1.10.2 Comparison of Functions #2]]
  - [[http://youtu.be/lj3E24nnPjI][1.11 Best Worst and Average Case Analysis]]
  - [[http://youtu.be/wU6udHRIkcc][1.12 Disjoint Sets Data Structure - Weighted Union and Collapsing Find]]
** 2 Divide and Conquer
  - [[http://youtu.be/2Rr2tW9zvRg][2 Divide And Conquer]]
  - [[http://youtu.be/4V30R3I1vLI][2.1.1 Recurrence Relation (T(n)= T(n-1) + 1) #1]]
  - [[http://youtu.be/IawM82BQ4II][2.1.2 Recurrence Relation (T(n)= T(n-1) + n) #2]]
  - [[http://youtu.be/MhT7XmxhaCE][2.1.3 Recurrence Relation (T(n)= T(n-1) + log n) #3]]
  - [[http://youtu.be/JvcqtZk2mng][2.1.4 Recurrence Relation T(n)=2 T(n-1)+1 #4]]
  - [[http://youtu.be/CyknhZbfMqc][2.2 Masters Theorem Decreasing Function]]
  - [[http://youtu.be/8gt0D0IqU5w][2.3.1 Recurrence Relation Dividing Function T(n)=T(n/2)+1 #1]]
  - [[http://youtu.be/XcZw01FuH18][2.3.2 Recurrence Relation Dividing {T(n)=T(n/2) +n} #2]]
  - [[http://youtu.be/1K9ebQJosvo][2.3.3 Recurrence Relation {T(n)= 2T(n/2) +n} #3]]
  - [[http://youtu.be/OynWkEj0S-s][2.4.1 Masters Theorem in Algorithms for Dividing Function #1]]
  - [[http://youtu.be/kGcO-nAm9Vc][2.4.2 Examples for Master Theorem #2]]
  - [[http://youtu.be/9rVuyjxzwgM][2.5 Root function (Recurrence Relation)]]
  - [[http://youtu.be/C2apEw9pgtw][2.6.1 Binary Search Iterative Method]]
  - [[http://youtu.be/uEUXGcc2VXM][2.6.2 Binary Search Recursive Method]]
  - [[http://youtu.be/HqPJF2L5h9U][2.6.3 Heap - Heap Sort - Heapify - Priority Queues]]
  - [[http://youtu.be/6pV2IF0fgKY][2.7.1 Two Way MergeSort - Iterative method]]
  - [[http://youtu.be/mB5HXBb_HY][2.7.2 Merge Sort Algorithm]]
  - [[http://youtu.be/ak-pz7tS5DE][2.7.3 MergeSort in-depth Analysis]]
  - [[http://youtu.be/7h1s2SojIRw][2.8.1 QuickSort Algorithm]]
  - [[http://youtu.be/-qOVVRIZzao][2.8.2 QuickSort Analysis]]
  - [[http://youtu.be/0oJyNmEbS4w][2.9 Strassens Matrix Multiplication]]
** 3. Greedy Mehod
  - [[http://youtu.be/ARvQcqJ_-NY][3. Greedy Method - Introduction]]
  - [[http://youtu.be/oTTzNMHM05I][3.1 Knapsack Problem - Greedy Method]]
  - [[http://youtu.be/zPtI8q9gvX8][3.2 Job Sequencing with Deadlines - Greedy Method]]
  - [[http://youtu.be/HHIc5JZyenI][3.3 Optimal Merge Pattern - Greedy Method]]
  - [[http://youtu.be/co4_ahEDCho][3.4 Huffman Coding - Greedy Method]]
  - [[http://youtu.be/4ZlRH0eK-qQ][3.5 Prims and Kruskals Algorithms - Greedy Method]]
  - [[http://youtu.be/XB4MIexjvY0][3.6 Dijkstra Algorithm - Single Source Shortest Path - Greedy Method]]
** 3. Dynamic Programing
  - [[http://youtu.be/5dRGRueKU3M][4 Principle of Optimality - Dynamic Programming introduction]]
  - [[http://youtu.be/9iE9Mj4m8jk][4.1 MultiStage Graph - Dynamic Programming]]
  - [[http://youtu.be/FcScLYJI42E][4.1.1 MultiStage Graph (Program) - Dynamic Programming]]
  - [[http://youtu.be/oNI0rf2P9gE][4.2 All Pairs Shortest Path (Floyd-Warshall) - Dynamic Programming]]
  - [[http://youtu.be/prx1psByp7U][4.3 Matrix Chain Multiplication - Dynamic Programming]]
  - [[http://youtu.be/_WncuhSJZyA][(New) Matrix Chain Multiplication using Dynamic Programming Formula]]
  - [[http://youtu.be/eKkXU3uu2zk][4.3.1 Matrix Chain Multiplication (Program) - Dynamic Programming]]
  - [[http://youtu.be/FtN3BYH2Zes][4.4 Bellman Ford Algorithm - Single Source Shortest Path - Dynamic Programming]]
  - [[http://youtu.be/nLmhmB6NzcM][4.5 0/1 Knapsack - Two Methods - Dynamic Programming]]
  - [[http://youtu.be/zRza99HPvkQ][4.5.1 0/1 Knapsack Problem (Program) - Dynamic Programming]]
  - [[http://youtu.be/vLS-zRCHo-Y][4.6 Optimal Binary Search Tree (Successful Search Only) - Dynamic Programming]]
  - [[http://youtu.be/wAy6nDMPYAE][4.6.2 (New) Optimal Binary Search Tree Successful and Unsuccessful Probability - Dynamic Programming]]
  - [[http://youtu.be/Q4zHb-Swzro][4.7 (New) Traveling Salesman Problem - Dynamic Programming using Formula]]
  - [[http://youtu.be/uJOmqBwENB8][4.8 Reliability Design - Dynamic Programming]]
  - [[http://youtu.be/sSno9rV8Rhg][4.9 Longest Common Subsequence (LCS) - Recursion and Dynamic Programming]]
  -
  - [[http://youtu.be/oBt53YbR9Kk][Dynamic Programming - Learn to Solve Algorithmic Problems & Coding Challenges]]



** 5. Graphs
  - [[http://youtu.be/pcKY4hjDrxk][5.1 Graph Traversals - BFS & DFS -Breadth First Search and Depth First Search]]
  - [[http://youtu.be/jFZsDDB0-vo][5.2 Articulation Point and Biconnected Components]]
** 6. Backtracking 
  - [[http://youtu.be/DKCbsiDBN6c][6 Introduction to Backtracking - Brute Force Approach]]
  - [[http://youtu.be/xFv_Hl4B83A][6.1 N Queens Problem using Backtracking]]
  - [[http://youtu.be/kyLxTdsT8ws][6.2 Sum Of Subsets Problem - Backtracking]]
  - [[http://youtu.be/052VkKhIaQ4][6.3 Graph Coloring Problem - Backtracking]]
  - [[http://youtu.be/dQr4wZCiJJ4][6.4 Hamiltonian Cycle - Backtracking]]
** 7. Branch and Bound 
  - [[http://youtu.be/3RBNPc0_Q6g][7 Branch and Bound Introduction]]
  - [[http://youtu.be/M7Fl_z7_J2k][7.1 Job Sequencing with Deadline - Branch and Bound]]
  - [[http://youtu.be/yV1d-b_NeK8][7.2 0/1 Knapsack using Branch and Bound]]
  - [[http://youtu.be/1FEP_sNb62k][7.3 Traveling Salesman Problem - Branch and Bound]]
** 8. Np problems
  - [[http://youtu.be/e2cF8a5aAhE][8. NP-Hard and NP-Complete Problems]]
  - [[http://youtu.be/qZs767KQcvE][8.1 NP-Hard Graph Problem - Clique Decision Problem]]
** 9. String Algorithms    
  - [[http://youtu.be/V5-7GzOfADQ][9.1 Knuth-Morris-Pratt KMP String Matching Algorithm]]
  - [[http://youtu.be/qQ8vS2btsxI][9.2 Rabin-Karp String Matching Algorithm]]
** 10. Trees
  - [[http://youtu.be/jDM6_TnYIqE][10.1 AVL Tree - Insertion and Rotations]]
  - [[http://youtu.be/aZjYr87r1b8][10.2 B Trees and B+ Trees. How they are useful in Databases]]
** 11. Misc
- [[http://youtu.be/ddsP7NecEBk][Asymptotic Notations - Simplified]]
- [[http://youtu.be/mFY0J5W8Udk][Hashing Technique - Simplified]]
- [[http://youtu.be/2raV0H9KqY8][Shortest Path Algorithms (Dijkstra and Bellman-Ford) - Simplified]]
- [[http://youtu.be/kyUpc_5705s][BFS DFS - Simplified]]
- [[http://youtu.be/q6RicK1FCUs][Tower of Hanoi Problem - Made Easy]]
- [[http://youtu.be/MJZd6uPi88E][Row-Major and Column-Major Mapping]]

** Programming Concepts
 - [[http://youtu.be/OqLt2GfX6jg][Uses of pointers]]
 - [[http://youtu.be/PdvGEI-P3-M][Stack vs Heap]]
 - [[http://youtu.be/uMGwjNuidZU][Pointer Arithmetic - *p++; *++p; ++*p;]]
 - [[http://youtu.be/868qXWoGS9E][Pointer to Array]]
 - [[http://youtu.be/ygK0YON10sQ][Recursion and Stack]]
   
